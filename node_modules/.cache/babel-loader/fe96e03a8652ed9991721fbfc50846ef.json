{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/uniswap-info/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/uniswap-info/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/workspace/uniswap-info/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import dayjs from'dayjs';import utc from'dayjs/plugin/utc';import{client}from'../apollo/client';import{TICKER_QUERY,TICKER_24HOUR_QUERY}from'../apollo/queries';import{get2DayPercentFormatted,getPercentFormatted}from'../helpers';export function useExchangeSpecificData(exchangeAddress){dayjs.extend(utc);var _useState=useState({}),_useState2=_slicedToArray(_useState,2),exchangeData=_useState2[0],setExchangeData=_useState2[1];useEffect(function(){var fetchExchangeData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(address){var utcCurrentTime,data24HoursAgo,data48HoursAgo,data,newExchangeData,result,_data,tokenName,tokenSymbol,tokenAddress,price,ethBalance,tradeVolumeEth,tradeVolumeUSD,priceUSD,totalTxsCount,utcOneDayBack,result24HoursAgo,utcTwoDaysBack,result48HoursAgo,invPrice,pricePercentChangeUSD,pricePercentChangeETH,volumePercentChangeETH,volumePercentChangeUSD,liquidityPercentChangeETH,liquidityPercentChangeUSD,txsPercentChange,oneDayTxs,oneDayVolume,oneDayVolumeUSD,_get2DayPercentFormat,_get2DayPercentFormat2,_get2DayPercentFormat3,_get2DayPercentFormat4,_get2DayPercentFormat5,_get2DayPercentFormat6;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:utcCurrentTime=dayjs();data24HoursAgo={};data48HoursAgo={};data={};newExchangeData={};// get the current state of the exchange\n_context.next=7;return client.query({query:TICKER_QUERY,variables:{id:address},fetchPolicy:'network-only'});case 7:result=_context.sent;if(result){data=result.data.exchange;}_data=data,tokenName=_data.tokenName,tokenSymbol=_data.tokenSymbol,tokenAddress=_data.tokenAddress,price=_data.price,ethBalance=_data.ethBalance,tradeVolumeEth=_data.tradeVolumeEth,tradeVolumeUSD=_data.tradeVolumeUSD,priceUSD=_data.priceUSD,totalTxsCount=_data.totalTxsCount;// get data from 24 hours ago\n_context.prev=10;utcOneDayBack=utcCurrentTime.subtract(1,'day');_context.next=14;return client.query({query:TICKER_24HOUR_QUERY,variables:{exchangeAddr:address,timestamp:utcOneDayBack.unix()},fetchPolicy:'network-only'});case 14:result24HoursAgo=_context.sent;if(result24HoursAgo){data24HoursAgo=result24HoursAgo.data.exchangeHistoricalDatas[0]?result24HoursAgo.data.exchangeHistoricalDatas[0]:data24HoursAgo;}_context.next=21;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](10);console.log('error: ',_context.t0);case 21:_context.prev=21;utcTwoDaysBack=utcCurrentTime.subtract(2,'day');_context.next=25;return client.query({query:TICKER_24HOUR_QUERY,variables:{exchangeAddr:address,timestamp:utcTwoDaysBack.unix()},fetchPolicy:'network-only'});case 25:result48HoursAgo=_context.sent;if(result48HoursAgo){data48HoursAgo=result48HoursAgo.data.exchangeHistoricalDatas[0]?result48HoursAgo.data.exchangeHistoricalDatas[0]:data48HoursAgo;}_context.next=32;break;case 29:_context.prev=29;_context.t1=_context[\"catch\"](21);console.log('error: ',_context.t1);case 32:// set default values to 0 (for exchanges that are brand new and dont have 24 hour data yet)\ninvPrice=1/price;pricePercentChangeUSD=0;pricePercentChangeETH=0;volumePercentChangeETH=0;volumePercentChangeUSD=0;liquidityPercentChangeETH=0;liquidityPercentChangeUSD=0;txsPercentChange=0;oneDayTxs=0;oneDayVolume=0;oneDayVolumeUSD=0;if(data){// volume in ETH\n;_get2DayPercentFormat=get2DayPercentFormatted(tradeVolumeEth,data24HoursAgo.tradeVolumeEth?data24HoursAgo.tradeVolumeEth:0,data48HoursAgo.tradeVolumeEth?data48HoursAgo.tradeVolumeEth:0);_get2DayPercentFormat2=_slicedToArray(_get2DayPercentFormat,2);oneDayVolume=_get2DayPercentFormat2[0];volumePercentChangeETH=_get2DayPercentFormat2[1];// until updated graph with correct USD accumulation\n_get2DayPercentFormat3=get2DayPercentFormatted(tradeVolumeUSD,data24HoursAgo.tradeVolumeUSD?data24HoursAgo.tradeVolumeUSD:0,data48HoursAgo.tradeVolumeUSD?data48HoursAgo.tradeVolumeUSD:0);_get2DayPercentFormat4=_slicedToArray(_get2DayPercentFormat3,2);oneDayVolumeUSD=_get2DayPercentFormat4[0];volumePercentChangeUSD=_get2DayPercentFormat4[1];// get tx values\n_get2DayPercentFormat5=get2DayPercentFormatted(totalTxsCount,data24HoursAgo.totalTxsCount?data24HoursAgo.totalTxsCount:1,//account for initial add tx\ndata48HoursAgo.totalTxsCount?data48HoursAgo.totalTxsCount:1);_get2DayPercentFormat6=_slicedToArray(_get2DayPercentFormat5,2);oneDayTxs=_get2DayPercentFormat6[0];txsPercentChange=_get2DayPercentFormat6[1];// regular percentage changes\npricePercentChangeUSD=getPercentFormatted(priceUSD,data24HoursAgo.tokenPriceUSD);pricePercentChangeETH=getPercentFormatted(1/price,1/data24HoursAgo.price);liquidityPercentChangeETH=getPercentFormatted(ethBalance,data24HoursAgo.ethBalance);liquidityPercentChangeUSD=getPercentFormatted(ethBalance*price*priceUSD,data24HoursAgo.ethBalance*data24HoursAgo.price*data24HoursAgo.tokenPriceUSD);}// manual overrides\nif(tokenAddress==='0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'){tokenSymbol='SAI';}if(tokenAddress==='0xf5dce57282a584d2746faf1593d3121fcac444dc'){tokenSymbol='cSAI';tokenName='Compound Sai';}// update \"exchanges\" with new information\nnewExchangeData.tokenName=tokenName;newExchangeData.tokenSymbol=tokenSymbol;newExchangeData.tokenAddress=tokenAddress;newExchangeData.price=price;newExchangeData.invPrice=invPrice;newExchangeData.priceUSD=priceUSD;newExchangeData.pricePercentChange=pricePercentChangeUSD;newExchangeData.pricePercentChangeETH=pricePercentChangeETH;newExchangeData.volumePercentChangeETH=volumePercentChangeETH;newExchangeData.volumePercentChangeUSD=volumePercentChangeUSD;newExchangeData.liquidityPercentChangeETH=liquidityPercentChangeETH;newExchangeData.liquidityPercentChangeUSD=liquidityPercentChangeUSD;newExchangeData.tradeVolume=oneDayVolume;newExchangeData.tradeVolumeUSD=oneDayVolumeUSD;newExchangeData.oneDayTxs=oneDayTxs;newExchangeData.ethLiquidity=ethBalance;newExchangeData.txsPercentChange=txsPercentChange;setExchangeData(newExchangeData);case 64:case\"end\":return _context.stop();}}},_callee,null,[[10,18],[21,29]]);}));return function fetchExchangeData(_x){return _ref.apply(this,arguments);};}();fetchExchangeData(exchangeAddress);},[exchangeAddress]);return exchangeData;}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/ExchangeSpecificData.js"],"names":["useEffect","useState","dayjs","utc","client","TICKER_QUERY","TICKER_24HOUR_QUERY","get2DayPercentFormatted","getPercentFormatted","useExchangeSpecificData","exchangeAddress","extend","exchangeData","setExchangeData","fetchExchangeData","address","utcCurrentTime","data24HoursAgo","data48HoursAgo","data","newExchangeData","query","variables","id","fetchPolicy","result","exchange","tokenName","tokenSymbol","tokenAddress","price","ethBalance","tradeVolumeEth","tradeVolumeUSD","priceUSD","totalTxsCount","utcOneDayBack","subtract","exchangeAddr","timestamp","unix","result24HoursAgo","exchangeHistoricalDatas","console","log","utcTwoDaysBack","result48HoursAgo","invPrice","pricePercentChangeUSD","pricePercentChangeETH","volumePercentChangeETH","volumePercentChangeUSD","liquidityPercentChangeETH","liquidityPercentChangeUSD","txsPercentChange","oneDayTxs","oneDayVolume","oneDayVolumeUSD","tokenPriceUSD","pricePercentChange","tradeVolume","ethLiquidity"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport { client } from '../apollo/client'\nimport { TICKER_QUERY, TICKER_24HOUR_QUERY } from '../apollo/queries'\nimport { get2DayPercentFormatted, getPercentFormatted } from '../helpers'\n\nexport function useExchangeSpecificData(exchangeAddress) {\n  dayjs.extend(utc)\n\n  const [exchangeData, setExchangeData] = useState({})\n\n  useEffect(() => {\n    const fetchExchangeData = async function(address) {\n      const utcCurrentTime = dayjs()\n      let data24HoursAgo = {}\n      let data48HoursAgo = {}\n      let data = {}\n      let newExchangeData = {}\n      // get the current state of the exchange\n      const result = await client.query({\n        query: TICKER_QUERY,\n        variables: {\n          id: address\n        },\n        fetchPolicy: 'network-only'\n      })\n\n      if (result) {\n        data = result.data.exchange\n      }\n\n      let {\n        tokenName,\n        tokenSymbol,\n        tokenAddress,\n        price,\n        ethBalance,\n        tradeVolumeEth,\n        tradeVolumeUSD,\n        priceUSD,\n        totalTxsCount\n      } = data\n\n      // get data from 24 hours ago\n      try {\n        const utcOneDayBack = utcCurrentTime.subtract(1, 'day')\n        const result24HoursAgo = await client.query({\n          query: TICKER_24HOUR_QUERY,\n          variables: {\n            exchangeAddr: address,\n            timestamp: utcOneDayBack.unix()\n          },\n          fetchPolicy: 'network-only'\n        })\n        if (result24HoursAgo) {\n          data24HoursAgo = result24HoursAgo.data.exchangeHistoricalDatas[0]\n            ? result24HoursAgo.data.exchangeHistoricalDatas[0]\n            : data24HoursAgo\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      // get data from 48 hours ago\n      try {\n        const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day')\n        const result48HoursAgo = await client.query({\n          query: TICKER_24HOUR_QUERY,\n          variables: {\n            exchangeAddr: address,\n            timestamp: utcTwoDaysBack.unix()\n          },\n          fetchPolicy: 'network-only'\n        })\n        if (result48HoursAgo) {\n          data48HoursAgo = result48HoursAgo.data.exchangeHistoricalDatas[0]\n            ? result48HoursAgo.data.exchangeHistoricalDatas[0]\n            : data48HoursAgo\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      // set default values to 0 (for exchanges that are brand new and dont have 24 hour data yet)\n      const invPrice = 1 / price\n      let pricePercentChangeUSD = 0\n      let pricePercentChangeETH = 0\n      let volumePercentChangeETH = 0\n      let volumePercentChangeUSD = 0\n      let liquidityPercentChangeETH = 0\n      let liquidityPercentChangeUSD = 0\n      let txsPercentChange = 0\n      let oneDayTxs = 0\n      let oneDayVolume = 0\n      let oneDayVolumeUSD = 0\n\n      if (data) {\n        // volume in ETH\n        ;[oneDayVolume, volumePercentChangeETH] = get2DayPercentFormatted(\n          tradeVolumeEth,\n          data24HoursAgo.tradeVolumeEth ? data24HoursAgo.tradeVolumeEth : 0,\n          data48HoursAgo.tradeVolumeEth ? data48HoursAgo.tradeVolumeEth : 0\n        )\n\n        // until updated graph with correct USD accumulation\n        ;[oneDayVolumeUSD, volumePercentChangeUSD] = get2DayPercentFormatted(\n          tradeVolumeUSD,\n          data24HoursAgo.tradeVolumeUSD ? data24HoursAgo.tradeVolumeUSD : 0,\n          data48HoursAgo.tradeVolumeUSD ? data48HoursAgo.tradeVolumeUSD : 0\n        )\n\n        // get tx values\n        ;[oneDayTxs, txsPercentChange] = get2DayPercentFormatted(\n          totalTxsCount,\n          data24HoursAgo.totalTxsCount ? data24HoursAgo.totalTxsCount : 1, //account for initial add tx\n          data48HoursAgo.totalTxsCount ? data48HoursAgo.totalTxsCount : 1\n        )\n\n        // regular percentage changes\n        pricePercentChangeUSD = getPercentFormatted(priceUSD, data24HoursAgo.tokenPriceUSD)\n        pricePercentChangeETH = getPercentFormatted(1 / price, 1 / data24HoursAgo.price)\n        liquidityPercentChangeETH = getPercentFormatted(ethBalance, data24HoursAgo.ethBalance)\n        liquidityPercentChangeUSD = getPercentFormatted(\n          ethBalance * price * priceUSD,\n          data24HoursAgo.ethBalance * data24HoursAgo.price * data24HoursAgo.tokenPriceUSD\n        )\n      }\n\n      // manual overrides\n      if (tokenAddress === '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359') {\n        tokenSymbol = 'SAI'\n      }\n\n      if (tokenAddress === '0xf5dce57282a584d2746faf1593d3121fcac444dc') {\n        tokenSymbol = 'cSAI'\n        tokenName = 'Compound Sai'\n      }\n\n      // update \"exchanges\" with new information\n      newExchangeData.tokenName = tokenName\n      newExchangeData.tokenSymbol = tokenSymbol\n      newExchangeData.tokenAddress = tokenAddress\n      newExchangeData.price = price\n      newExchangeData.invPrice = invPrice\n      newExchangeData.priceUSD = priceUSD\n      newExchangeData.pricePercentChange = pricePercentChangeUSD\n      newExchangeData.pricePercentChangeETH = pricePercentChangeETH\n      newExchangeData.volumePercentChangeETH = volumePercentChangeETH\n      newExchangeData.volumePercentChangeUSD = volumePercentChangeUSD\n      newExchangeData.liquidityPercentChangeETH = liquidityPercentChangeETH\n      newExchangeData.liquidityPercentChangeUSD = liquidityPercentChangeUSD\n      newExchangeData.tradeVolume = oneDayVolume\n      newExchangeData.tradeVolumeUSD = oneDayVolumeUSD\n      newExchangeData.oneDayTxs = oneDayTxs\n      newExchangeData.ethLiquidity = ethBalance\n      newExchangeData.txsPercentChange = txsPercentChange\n\n      setExchangeData(newExchangeData)\n    }\n    fetchExchangeData(exchangeAddress)\n  }, [exchangeAddress])\n\n  return exchangeData\n}\n"]},"metadata":{},"sourceType":"module"}