{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import dayjs from'dayjs';import utc from'dayjs/plugin/utc';import{client}from'../apollo/client';import{CHART_QUERY,TICKER_QUERY}from'../apollo/queries';export function useChart(exchangeAddress,daysToQuery){dayjs.extend(utc);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),chartData=_useState2[0],setChartData=_useState2[1];useEffect(function(){var fetchChartData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(exchangeAddress,daysToQuery){var utcEndTime,utcStartTime,startTime,data,dataEnd,result,_result,dayIndexSet,dayIndexArray,oneDay,timestamp,latestLiquidityUSD,latestLiquidityETH,latestEthBalance,latestTokenBalance,latestEthPerToken,latestTokenPriceUSD,latestTokensPerUSD,latestTokensPerETH,index,nextDay,currentDayIndex;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;utcEndTime=dayjs.utc();_context.t0=daysToQuery;_context.next=_context.t0==='all'?5:_context.t0==='3months'?7:_context.t0==='1month'?9:_context.t0==='1week'?11:11;break;case 5:utcStartTime=utcEndTime.subtract(1,'year').startOf('year');return _context.abrupt(\"break\",13);case 7:utcStartTime=utcEndTime.subtract(3,'month');return _context.abrupt(\"break\",13);case 9:utcStartTime=utcEndTime.subtract(1,'month');return _context.abrupt(\"break\",13);case 11:utcStartTime=utcEndTime.subtract(7,'day').startOf('day');return _context.abrupt(\"break\",13);case 13:startTime=utcStartTime.unix()-1;// -1 because we filter on greater than in the query\ndata=[];dataEnd=false;case 16:if(dataEnd){_context.next=24;break;}_context.next=19;return client.query({query:CHART_QUERY,variables:{exchangeAddr:exchangeAddress,date:startTime},fetchPolicy:'cache-first'});case 19:result=_context.sent;data=data.concat(result.data.exchangeDayDatas);if(result.data.exchangeDayDatas.length!==100){dataEnd=true;}else{startTime=result.data.exchangeDayDatas[result.data.exchangeDayDatas.length-1].date;}_context.next=16;break;case 24:if(data[0]){_context.next=29;break;}_context.next=27;return client.query({query:TICKER_QUERY,variables:{id:exchangeAddress},fetchPolicy:'network-only'});case 27:_result=_context.sent;if(_result){data[0]=_result.data.exchange;data[0].date=startTime;data[0].marginalEthRate=data[0].price;data[0].tokenPriceUSD=data[0].priceUSD;}case 29:// use to keep track of which days had volume\ndayIndexSet=new Set();dayIndexArray=[];oneDay=24*60*60;data.forEach(function(dayData,i){// add the day index to the set of days\ndayIndexSet.add((data[i].date/oneDay).toFixed(0));dayIndexArray.push(data[i]);data[i].dayString=data[i].date;var ethVolume=data[i].ethVolume;var ethPriceUsd=parseFloat(data[i].marginalEthRate)*parseFloat(data[i].tokenPriceUSD);data[i].ethVolume=parseFloat(ethVolume);data[i].tokenPriceUSD=parseFloat(data[i].tokenPriceUSD);data[i].tokensPerUSD=1/parseFloat(data[i].tokenPriceUSD);data[i].usdVolume=parseFloat(ethVolume)*ethPriceUsd;data[i].ethPerToken=1/parseFloat(data[i].marginalEthRate);data[i].tokensPerEth=parseFloat(data[i].marginalEthRate);var y=data[i].ethBalance;data[i].ethBalance=parseFloat(y);data[i].tokenBalance=parseFloat(data[i].tokenBalance);data[i].usdLiquidity=parseFloat(data[i].tokenBalance)*parseFloat(data[i].tokenPriceUSD)+parseFloat(data[i].ethBalance)*ethPriceUsd;data[i].ethLiquidity=parseFloat(data[i].ethBalance)*2;});// fill in empty days\ntimestamp=data[0].date?data[0].date:startTime;latestLiquidityUSD=data[0].usdLiquidity;latestLiquidityETH=data[0].ethLiquidity;latestEthBalance=data[0].ethBalance;latestTokenBalance=data[0].tokenBalance;latestEthPerToken=data[0].ethPerToken;latestTokenPriceUSD=data[0].tokenPriceUSD;latestTokensPerUSD=data[0].tokensPerUSD;latestTokensPerETH=data[0].tokensPerEth;index=1;while(timestamp<utcEndTime.unix()-oneDay){nextDay=timestamp+oneDay;currentDayIndex=(nextDay/oneDay).toFixed(0);if(!dayIndexSet.has(currentDayIndex)){data.push({date:nextDay,dayString:nextDay,ethVolume:0,usdVolume:0,usdLiquidity:latestLiquidityUSD,ethLiquidity:latestLiquidityETH,ethBalance:latestEthBalance,tokenBalance:latestTokenBalance,tokenPriceUSD:latestTokenPriceUSD,ethPerToken:latestEthPerToken,tokensPerUSD:latestTokensPerUSD,tokensPerEth:latestTokensPerETH});}else{latestLiquidityUSD=dayIndexArray[index].usdLiquidity;latestLiquidityETH=dayIndexArray[index].ethLiquidity;latestEthBalance=dayIndexArray[index].ethBalance;latestTokenBalance=dayIndexArray[index].tokenBalance;latestEthPerToken=dayIndexArray[index].ethPerToken;latestTokenPriceUSD=dayIndexArray[index].tokenPriceUSD;latestTokensPerUSD=dayIndexArray[index].tokensPerUSD;latestTokensPerETH=dayIndexArray[index].tokensPerEth;index=index+1;}timestamp=nextDay;}data=data.sort(function(a,b){return parseInt(a.date)>parseInt(b.date)?1:-1;});setChartData(data);_context.next=51;break;case 48:_context.prev=48;_context.t1=_context[\"catch\"](0);console.log('error: ',_context.t1);case 51:case\"end\":return _context.stop();}}},_callee,null,[[0,48]]);}));return function fetchChartData(_x,_x2){return _ref.apply(this,arguments);};}();fetchChartData(exchangeAddress,daysToQuery);},[exchangeAddress,daysToQuery]);return chartData;}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/ChartData.js"],"names":["useEffect","useState","dayjs","utc","client","CHART_QUERY","TICKER_QUERY","useChart","exchangeAddress","daysToQuery","extend","chartData","setChartData","fetchChartData","utcEndTime","utcStartTime","subtract","startOf","startTime","unix","data","dataEnd","query","variables","exchangeAddr","date","fetchPolicy","result","concat","exchangeDayDatas","length","id","exchange","marginalEthRate","price","tokenPriceUSD","priceUSD","dayIndexSet","Set","dayIndexArray","oneDay","forEach","dayData","i","add","toFixed","push","dayString","ethVolume","ethPriceUsd","parseFloat","tokensPerUSD","usdVolume","ethPerToken","tokensPerEth","y","ethBalance","tokenBalance","usdLiquidity","ethLiquidity","timestamp","latestLiquidityUSD","latestLiquidityETH","latestEthBalance","latestTokenBalance","latestEthPerToken","latestTokenPriceUSD","latestTokensPerUSD","latestTokensPerETH","index","nextDay","currentDayIndex","has","sort","a","b","parseInt","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\n\nimport { client } from '../apollo/client'\nimport { CHART_QUERY, TICKER_QUERY } from '../apollo/queries'\n\nexport function useChart(exchangeAddress, daysToQuery) {\n  dayjs.extend(utc)\n\n  const [chartData, setChartData] = useState([])\n\n  useEffect(() => {\n    const fetchChartData = async function(exchangeAddress, daysToQuery) {\n      try {\n        const utcEndTime = dayjs.utc()\n        let utcStartTime\n        switch (daysToQuery) {\n          case 'all':\n            utcStartTime = utcEndTime.subtract(1, 'year').startOf('year')\n            break\n          case '3months':\n            utcStartTime = utcEndTime.subtract(3, 'month')\n            break\n          case '1month':\n            utcStartTime = utcEndTime.subtract(1, 'month')\n            break\n          case '1week':\n          default:\n            utcStartTime = utcEndTime.subtract(7, 'day').startOf('day')\n            break\n        }\n        let startTime = utcStartTime.unix() - 1 // -1 because we filter on greater than in the query\n        let data = []\n        let dataEnd = false\n        while (!dataEnd) {\n          let result = await client.query({\n            query: CHART_QUERY,\n            variables: {\n              exchangeAddr: exchangeAddress,\n              date: startTime\n            },\n            fetchPolicy: 'cache-first'\n          })\n          data = data.concat(result.data.exchangeDayDatas)\n          if (result.data.exchangeDayDatas.length !== 100) {\n            dataEnd = true\n          } else {\n            startTime = result.data.exchangeDayDatas[result.data.exchangeDayDatas.length - 1].date\n          }\n        }\n\n        // if no txs in the current timestamp ut must be most current\n        if (!data[0]) {\n          const result = await client.query({\n            query: TICKER_QUERY,\n            variables: {\n              id: exchangeAddress\n            },\n            fetchPolicy: 'network-only'\n          })\n          if (result) {\n            data[0] = result.data.exchange\n            data[0].date = startTime\n            data[0].marginalEthRate = data[0].price\n            data[0].tokenPriceUSD = data[0].priceUSD\n          }\n        }\n        // use to keep track of which days had volume\n        let dayIndexSet = new Set()\n        let dayIndexArray = []\n        const oneDay = 24 * 60 * 60\n        data.forEach((dayData, i) => {\n          // add the day index to the set of days\n          dayIndexSet.add((data[i].date / oneDay).toFixed(0))\n          dayIndexArray.push(data[i])\n          data[i].dayString = data[i].date\n          let ethVolume = data[i].ethVolume\n          let ethPriceUsd = parseFloat(data[i].marginalEthRate) * parseFloat(data[i].tokenPriceUSD)\n          data[i].ethVolume = parseFloat(ethVolume)\n          data[i].tokenPriceUSD = parseFloat(data[i].tokenPriceUSD)\n          data[i].tokensPerUSD = 1 / parseFloat(data[i].tokenPriceUSD)\n          data[i].usdVolume = parseFloat(ethVolume) * ethPriceUsd\n          data[i].ethPerToken = 1 / parseFloat(data[i].marginalEthRate)\n          data[i].tokensPerEth = parseFloat(data[i].marginalEthRate)\n          let y = data[i].ethBalance\n          data[i].ethBalance = parseFloat(y)\n          data[i].tokenBalance = parseFloat(data[i].tokenBalance)\n          data[i].usdLiquidity =\n            parseFloat(data[i].tokenBalance) * parseFloat(data[i].tokenPriceUSD) +\n            parseFloat(data[i].ethBalance) * ethPriceUsd\n          data[i].ethLiquidity = parseFloat(data[i].ethBalance) * 2\n        })\n        // fill in empty days\n        let timestamp = data[0].date ? data[0].date : startTime\n        let latestLiquidityUSD = data[0].usdLiquidity\n        let latestLiquidityETH = data[0].ethLiquidity\n        let latestEthBalance = data[0].ethBalance\n        let latestTokenBalance = data[0].tokenBalance\n        let latestEthPerToken = data[0].ethPerToken\n        let latestTokenPriceUSD = data[0].tokenPriceUSD\n        let latestTokensPerUSD = data[0].tokensPerUSD\n        let latestTokensPerETH = data[0].tokensPerEth\n        let index = 1\n        while (timestamp < utcEndTime.unix() - oneDay) {\n          const nextDay = timestamp + oneDay\n          let currentDayIndex = (nextDay / oneDay).toFixed(0)\n          if (!dayIndexSet.has(currentDayIndex)) {\n            data.push({\n              date: nextDay,\n              dayString: nextDay,\n              ethVolume: 0,\n              usdVolume: 0,\n              usdLiquidity: latestLiquidityUSD,\n              ethLiquidity: latestLiquidityETH,\n              ethBalance: latestEthBalance,\n              tokenBalance: latestTokenBalance,\n              tokenPriceUSD: latestTokenPriceUSD,\n              ethPerToken: latestEthPerToken,\n              tokensPerUSD: latestTokensPerUSD,\n              tokensPerEth: latestTokensPerETH\n            })\n          } else {\n            latestLiquidityUSD = dayIndexArray[index].usdLiquidity\n            latestLiquidityETH = dayIndexArray[index].ethLiquidity\n            latestEthBalance = dayIndexArray[index].ethBalance\n            latestTokenBalance = dayIndexArray[index].tokenBalance\n            latestEthPerToken = dayIndexArray[index].ethPerToken\n            latestTokenPriceUSD = dayIndexArray[index].tokenPriceUSD\n            latestTokensPerUSD = dayIndexArray[index].tokensPerUSD\n            latestTokensPerETH = dayIndexArray[index].tokensPerEth\n            index = index + 1\n          }\n          timestamp = nextDay\n        }\n        data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\n        setChartData(data)\n      } catch (err) {\n        console.log('error: ', err)\n      }\n    }\n    fetchChartData(exchangeAddress, daysToQuery)\n  }, [exchangeAddress, daysToQuery])\n\n  return chartData\n}\n"]},"metadata":{},"sourceType":"module"}