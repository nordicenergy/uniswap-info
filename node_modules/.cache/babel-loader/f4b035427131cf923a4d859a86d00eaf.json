{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  margin-left: 0;\\n  margin-right: 1rem;\\n  height: 34px;\\n  width: 34px;\\n  border-radius: 50%;\\n  border: 2px solid white;\\n  background-color: white;\\n  display: flex;\\n  align-itmes: center;\\n  justify-content: center;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useEffect,useState}from'react';import{client}from'../apollo/client';import styled from'styled-components';import{DIRECTORY_QUERY}from'../apollo/queries';import{hardcodedExchanges}from'../constants/exchanges';import TokenLogo from'../components/TokenLogo';var StyledTokenLogo=styled(TokenLogo)(_templateObject());export function useAllExchanges(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),exchanges=_useState2[0],setExchanges=_useState2[1];useEffect(function(){var fetchAllExchanges=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var exchanges,data,dataEnd,skip,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:exchanges={};data=[];_context.prev=2;dataEnd=false;skip=0;case 5:if(dataEnd){_context.next=14;break;}_context.next=8;return client.query({query:DIRECTORY_QUERY,variables:{first:100,skip:skip}});case 8:result=_context.sent;data=data.concat(result.data.exchanges);skip=skip+100;if(result.data.exchanges.length!==100){dataEnd=true;}_context.next=5;break;case 14:_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](2);console.log('error: ',_context.t0);case 19:data.forEach(function(exchange){if(exchange.tokenAddress==='0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'){exchange.tokenSymbol='SAI';}if(exchange.tokenAddress==='0xf5dce57282a584d2746faf1593d3121fcac444dc'){exchange.tokenSymbol='cSAI';exchange.tokenName='Compound SAI';}exchange.label=buildDirectoryLabel(exchange);var logo=React.createElement(TokenLogo,{address:exchange.tokenAddress,style:{height:'20px',width:'20px'}});var logoStyled=React.createElement(StyledTokenLogo,{address:exchange.tokenAddress,header:true,size:30});exchange.logo=logo;exchange.logoStyled=logoStyled;exchanges[exchange.id]=exchange;});setExchanges(exchanges);case 21:case\"end\":return _context.stop();}}},_callee,null,[[2,16]]);}));return function fetchAllExchanges(){return _ref.apply(this,arguments);};}();fetchAllExchanges();},[]);return exchanges;}// build the label for dropdown\nvar buildDirectoryLabel=function buildDirectoryLabel(exchange){var tokenSymbol=exchange.tokenSymbol,id=exchange.id,tokenAddress=exchange.tokenAddress;var exchangeAddress=id;// custom handling for UI\nif(tokenSymbol===null){if(hardcodedExchanges.hasOwnProperty(exchangeAddress.toUpperCase())){tokenSymbol=hardcodedExchanges[exchangeAddress.toUpperCase()].symbol;}else{tokenSymbol='unknown';}}return{label:tokenSymbol,value:exchangeAddress,tokenAddress:tokenAddress};};","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/GetAllExchanges.js"],"names":["React","useEffect","useState","client","styled","DIRECTORY_QUERY","hardcodedExchanges","TokenLogo","StyledTokenLogo","useAllExchanges","exchanges","setExchanges","fetchAllExchanges","data","dataEnd","skip","query","variables","first","result","concat","length","console","log","forEach","exchange","tokenAddress","tokenSymbol","tokenName","label","buildDirectoryLabel","logo","height","width","logoStyled","id","exchangeAddress","hasOwnProperty","toUpperCase","symbol","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { client } from '../apollo/client'\nimport styled from 'styled-components'\nimport { DIRECTORY_QUERY } from '../apollo/queries'\nimport { hardcodedExchanges } from '../constants/exchanges'\nimport TokenLogo from '../components/TokenLogo'\n\nconst StyledTokenLogo = styled(TokenLogo)`\n  margin-left: 0;\n  margin-right: 1rem;\n  height: 34px;\n  width: 34px;\n  border-radius: 50%;\n  border: 2px solid white;\n  background-color: white;\n  display: flex;\n  align-itmes: center;\n  justify-content: center;\n`\n\nexport function useAllExchanges() {\n  const [exchanges, setExchanges] = useState([])\n\n  useEffect(() => {\n    const fetchAllExchanges = async function() {\n      let exchanges = {}\n      let data = []\n      try {\n        let dataEnd = false\n        let skip = 0\n        while (!dataEnd) {\n          let result = await client.query({\n            query: DIRECTORY_QUERY,\n            variables: {\n              first: 100,\n              skip: skip\n            }\n          })\n          data = data.concat(result.data.exchanges)\n          skip = skip + 100\n          if (result.data.exchanges.length !== 100) {\n            dataEnd = true\n          }\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n      data.forEach(exchange => {\n        if (exchange.tokenAddress === '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359') {\n          exchange.tokenSymbol = 'SAI'\n        }\n        if (exchange.tokenAddress === '0xf5dce57282a584d2746faf1593d3121fcac444dc') {\n          exchange.tokenSymbol = 'cSAI'\n          exchange.tokenName = 'Compound SAI'\n        }\n        exchange.label = buildDirectoryLabel(exchange)\n        const logo = <TokenLogo address={exchange.tokenAddress} style={{ height: '20px', width: '20px' }} />\n        const logoStyled = <StyledTokenLogo address={exchange.tokenAddress} header={true} size={30} />\n        exchange.logo = logo\n        exchange.logoStyled = logoStyled\n        exchanges[exchange.id] = exchange\n      })\n      setExchanges(exchanges)\n    }\n    fetchAllExchanges()\n  }, [])\n  return exchanges\n}\n\n// build the label for dropdown\nconst buildDirectoryLabel = exchange => {\n  let { tokenSymbol, id, tokenAddress } = exchange\n  const exchangeAddress = id\n\n  // custom handling for UI\n  if (tokenSymbol === null) {\n    if (hardcodedExchanges.hasOwnProperty(exchangeAddress.toUpperCase())) {\n      tokenSymbol = hardcodedExchanges[exchangeAddress.toUpperCase()].symbol\n    } else {\n      tokenSymbol = 'unknown'\n    }\n  }\n\n  return {\n    label: tokenSymbol,\n    value: exchangeAddress,\n    tokenAddress: tokenAddress\n  }\n}\n"]},"metadata":{},"sourceType":"module"}