{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-info/src/Data/GetAllExchanges.js\";\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apollo/client';\nimport styled from 'styled-components';\nimport { DIRECTORY_QUERY } from '../apollo/queries';\nimport { hardcodedExchanges } from '../constants/exchanges';\nimport TokenLogo from '../components/TokenLogo';\nconst StyledTokenLogo = styled(TokenLogo)`\n  margin-left: 0;\n  margin-right: 1rem;\n  height: 34px;\n  width: 34px;\n  border-radius: 50%;\n  border: 2px solid white;\n  background-color: white;\n  display: flex;\n  align-itmes: center;\n  justify-content: center;\n`;\nexport function useAllExchanges() {\n  const [exchanges, setExchanges] = useState([]);\n  useEffect(() => {\n    const fetchAllExchanges = async function () {\n      let exchanges = {};\n      let data = [];\n\n      try {\n        let dataEnd = false;\n        let skip = 0;\n\n        while (!dataEnd) {\n          let result = await client.query({\n            query: DIRECTORY_QUERY,\n            variables: {\n              first: 100,\n              skip: skip\n            }\n          });\n          data = data.concat(result.data.exchanges);\n          skip = skip + 100;\n\n          if (result.data.exchanges.length !== 100) {\n            dataEnd = true;\n          }\n        }\n      } catch (err) {\n        console.log('error: ', err);\n      }\n\n      data.forEach(exchange => {\n        if (exchange.tokenAddress === '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359') {\n          exchange.tokenSymbol = 'SAI';\n        }\n\n        if (exchange.tokenAddress === '0xf5dce57282a584d2746faf1593d3121fcac444dc') {\n          exchange.tokenSymbol = 'cSAI';\n          exchange.tokenName = 'Compound SAI';\n        }\n\n        exchange.label = buildDirectoryLabel(exchange);\n        const logo = React.createElement(TokenLogo, {\n          address: exchange.tokenAddress,\n          style: {\n            height: '20px',\n            width: '20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n        const logoStyled = React.createElement(StyledTokenLogo, {\n          address: exchange.tokenAddress,\n          header: true,\n          size: 30,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n        exchange.logo = logo;\n        exchange.logoStyled = logoStyled;\n        exchanges[exchange.id] = exchange;\n      });\n      setExchanges(exchanges);\n    };\n\n    fetchAllExchanges();\n  }, []);\n  return exchanges;\n} // build the label for dropdown\n\nconst buildDirectoryLabel = exchange => {\n  let {\n    tokenSymbol,\n    id,\n    tokenAddress\n  } = exchange;\n  const exchangeAddress = id; // custom handling for UI\n\n  if (tokenSymbol === null) {\n    if (hardcodedExchanges.hasOwnProperty(exchangeAddress.toUpperCase())) {\n      tokenSymbol = hardcodedExchanges[exchangeAddress.toUpperCase()].symbol;\n    } else {\n      tokenSymbol = 'unknown';\n    }\n  }\n\n  return {\n    label: tokenSymbol,\n    value: exchangeAddress,\n    tokenAddress: tokenAddress\n  };\n};","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/GetAllExchanges.js"],"names":["React","useEffect","useState","client","styled","DIRECTORY_QUERY","hardcodedExchanges","TokenLogo","StyledTokenLogo","useAllExchanges","exchanges","setExchanges","fetchAllExchanges","data","dataEnd","skip","result","query","variables","first","concat","length","err","console","log","forEach","exchange","tokenAddress","tokenSymbol","tokenName","label","buildDirectoryLabel","logo","height","width","logoStyled","id","exchangeAddress","hasOwnProperty","toUpperCase","symbol","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { client } from '../apollo/client'\nimport styled from 'styled-components'\nimport { DIRECTORY_QUERY } from '../apollo/queries'\nimport { hardcodedExchanges } from '../constants/exchanges'\nimport TokenLogo from '../components/TokenLogo'\n\nconst StyledTokenLogo = styled(TokenLogo)`\n  margin-left: 0;\n  margin-right: 1rem;\n  height: 34px;\n  width: 34px;\n  border-radius: 50%;\n  border: 2px solid white;\n  background-color: white;\n  display: flex;\n  align-itmes: center;\n  justify-content: center;\n`\n\nexport function useAllExchanges() {\n  const [exchanges, setExchanges] = useState([])\n\n  useEffect(() => {\n    const fetchAllExchanges = async function() {\n      let exchanges = {}\n      let data = []\n      try {\n        let dataEnd = false\n        let skip = 0\n        while (!dataEnd) {\n          let result = await client.query({\n            query: DIRECTORY_QUERY,\n            variables: {\n              first: 100,\n              skip: skip\n            }\n          })\n          data = data.concat(result.data.exchanges)\n          skip = skip + 100\n          if (result.data.exchanges.length !== 100) {\n            dataEnd = true\n          }\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n      data.forEach(exchange => {\n        if (exchange.tokenAddress === '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359') {\n          exchange.tokenSymbol = 'SAI'\n        }\n        if (exchange.tokenAddress === '0xf5dce57282a584d2746faf1593d3121fcac444dc') {\n          exchange.tokenSymbol = 'cSAI'\n          exchange.tokenName = 'Compound SAI'\n        }\n        exchange.label = buildDirectoryLabel(exchange)\n        const logo = <TokenLogo address={exchange.tokenAddress} style={{ height: '20px', width: '20px' }} />\n        const logoStyled = <StyledTokenLogo address={exchange.tokenAddress} header={true} size={30} />\n        exchange.logo = logo\n        exchange.logoStyled = logoStyled\n        exchanges[exchange.id] = exchange\n      })\n      setExchanges(exchanges)\n    }\n    fetchAllExchanges()\n  }, [])\n  return exchanges\n}\n\n// build the label for dropdown\nconst buildDirectoryLabel = exchange => {\n  let { tokenSymbol, id, tokenAddress } = exchange\n  const exchangeAddress = id\n\n  // custom handling for UI\n  if (tokenSymbol === null) {\n    if (hardcodedExchanges.hasOwnProperty(exchangeAddress.toUpperCase())) {\n      tokenSymbol = hardcodedExchanges[exchangeAddress.toUpperCase()].symbol\n    } else {\n      tokenSymbol = 'unknown'\n    }\n  }\n\n  return {\n    label: tokenSymbol,\n    value: exchangeAddress,\n    tokenAddress: tokenAddress\n  }\n}\n"]},"metadata":{},"sourceType":"module"}