{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { get2DayPercentFormatted, getPercentFormatted } from '../helpers';\nimport { client } from '../apollo/client';\nimport { UNISWAP_GLOBALS_QUERY, UNISWAP_GLOBALS_24HOURS_AGO_QUERY } from '../apollo/queries';\nexport function useGlobalData() {\n  dayjs.extend(utc);\n  const [globalData, setGlobalData] = useState();\n  useEffect(() => {\n    const fetchGlobalData = async function () {\n      let data = {};\n      let data24HoursAgo = {};\n      let data48HoursAgo = {};\n      const utcCurrentTime = dayjs();\n\n      try {\n        // get the current data\n        let result = await client.query({\n          query: UNISWAP_GLOBALS_QUERY,\n          fetchPolicy: 'cache-first'\n        });\n\n        if (result) {\n          data.totalVolumeInEth = result.data.uniswap.totalVolumeInEth;\n          data.totalVolumeUSD = result.data.uniswap.totalVolumeUSD;\n          data.liquidityEth = result.data.uniswap.totalLiquidityInEth;\n          data.liquidityUsd = result.data.uniswap.totalLiquidityUSD;\n          data.txCount = result.data.uniswap.txCount;\n        }\n      } catch (err) {\n        console.log('error: ', err);\n      }\n\n      try {\n        const utcOneDayBack = utcCurrentTime.subtract(1, 'day'); // get data one day ago\n\n        let result = await client.query({\n          query: UNISWAP_GLOBALS_24HOURS_AGO_QUERY,\n          variables: {\n            date: utcOneDayBack.unix()\n          },\n          fetchPolicy: 'cache-first'\n        });\n\n        if (result) {\n          data24HoursAgo.totalVolumeInEth = result.data.uniswapHistoricalDatas[0].totalVolumeInEth;\n          data24HoursAgo.totalVolumeUSD = result.data.uniswapHistoricalDatas[0].totalVolumeUSD;\n          data24HoursAgo.liquidityEth = result.data.uniswapHistoricalDatas[0].totalLiquidityInEth;\n          data24HoursAgo.liquidityUsd = result.data.uniswapHistoricalDatas[0].totalLiquidityUSD;\n          data24HoursAgo.txCount = result.data.uniswapHistoricalDatas[0].txCount;\n        }\n      } catch (err) {\n        console.log('error: ', err);\n      } // get two day stats\n\n\n      const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day');\n\n      try {\n        let resultTwoDays = await client.query({\n          query: UNISWAP_GLOBALS_24HOURS_AGO_QUERY,\n          variables: {\n            date: utcTwoDaysBack.unix()\n          },\n          fetchPolicy: 'cache-first'\n        });\n\n        if (resultTwoDays) {\n          // set two day data\n          data48HoursAgo.totalVolumeInEth = resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeInEth;\n          data48HoursAgo.totalVolumeUSD = resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeUSD;\n          data48HoursAgo.liquidityEth = resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityInEth;\n          data48HoursAgo.liquidityUsd = resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityUSD;\n          data48HoursAgo.txCount = resultTwoDays.data.uniswapHistoricalDatas[0].txCount;\n        }\n      } catch (err) {\n        console.log('error: ', err);\n      } // 48 hour windows\n\n\n      let [volumeChangeUSD, volumePercentChangeUSD] = get2DayPercentFormatted(data.totalVolumeUSD, data24HoursAgo.totalVolumeUSD, data48HoursAgo.totalVolumeUSD);\n      let [volumeChangeETH, volumePercentChangeETH] = get2DayPercentFormatted(data.totalVolumeInEth, data24HoursAgo.totalVolumeInEth, data48HoursAgo.totalVolumeInEth);\n      let [txCountChange, txCountPercentChange] = get2DayPercentFormatted(data.txCount, data24HoursAgo.txCount, data48HoursAgo.txCount); // regular percent changes\n\n      let liquidityPercentChangeETH = getPercentFormatted(data.liquidityEth, data24HoursAgo.liquidityEth);\n      let liquidityPercentChangeUSD = getPercentFormatted(data.liquidityUsd, data24HoursAgo.liquidityUsd);\n      data.liquidityPercentChange = liquidityPercentChangeETH;\n      data.liquidityPercentChangeUSD = liquidityPercentChangeUSD;\n      data.volumePercentChange = volumePercentChangeETH;\n      data.volumePercentChangeUSD = volumePercentChangeUSD;\n      data.txCount = txCountChange;\n      data.txCountPercentChange = txCountPercentChange;\n      data.dailyVolumeETH = volumeChangeETH;\n      data.dailyVolumeUSD = volumeChangeUSD;\n      setGlobalData(data);\n    };\n\n    fetchGlobalData();\n  }, []);\n  return globalData;\n}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/GlobalData.js"],"names":["useEffect","useState","dayjs","utc","get2DayPercentFormatted","getPercentFormatted","client","UNISWAP_GLOBALS_QUERY","UNISWAP_GLOBALS_24HOURS_AGO_QUERY","useGlobalData","extend","globalData","setGlobalData","fetchGlobalData","data","data24HoursAgo","data48HoursAgo","utcCurrentTime","result","query","fetchPolicy","totalVolumeInEth","uniswap","totalVolumeUSD","liquidityEth","totalLiquidityInEth","liquidityUsd","totalLiquidityUSD","txCount","err","console","log","utcOneDayBack","subtract","variables","date","unix","uniswapHistoricalDatas","utcTwoDaysBack","resultTwoDays","volumeChangeUSD","volumePercentChangeUSD","volumeChangeETH","volumePercentChangeETH","txCountChange","txCountPercentChange","liquidityPercentChangeETH","liquidityPercentChangeUSD","liquidityPercentChange","volumePercentChange","dailyVolumeETH","dailyVolumeUSD"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport { get2DayPercentFormatted, getPercentFormatted } from '../helpers'\nimport { client } from '../apollo/client'\nimport { UNISWAP_GLOBALS_QUERY, UNISWAP_GLOBALS_24HOURS_AGO_QUERY } from '../apollo/queries'\n\nexport function useGlobalData() {\n  dayjs.extend(utc)\n  const [globalData, setGlobalData] = useState()\n\n  useEffect(() => {\n    const fetchGlobalData = async function() {\n      let data = {}\n      let data24HoursAgo = {}\n      let data48HoursAgo = {}\n      const utcCurrentTime = dayjs()\n      try {\n        // get the current data\n        let result = await client.query({\n          query: UNISWAP_GLOBALS_QUERY,\n          fetchPolicy: 'cache-first'\n        })\n        if (result) {\n          data.totalVolumeInEth = result.data.uniswap.totalVolumeInEth\n          data.totalVolumeUSD = result.data.uniswap.totalVolumeUSD\n          data.liquidityEth = result.data.uniswap.totalLiquidityInEth\n          data.liquidityUsd = result.data.uniswap.totalLiquidityUSD\n          data.txCount = result.data.uniswap.txCount\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      try {\n        const utcOneDayBack = utcCurrentTime.subtract(1, 'day')\n        // get data one day ago\n        let result = await client.query({\n          query: UNISWAP_GLOBALS_24HOURS_AGO_QUERY,\n          variables: {\n            date: utcOneDayBack.unix()\n          },\n          fetchPolicy: 'cache-first'\n        })\n        if (result) {\n          data24HoursAgo.totalVolumeInEth = result.data.uniswapHistoricalDatas[0].totalVolumeInEth\n          data24HoursAgo.totalVolumeUSD = result.data.uniswapHistoricalDatas[0].totalVolumeUSD\n          data24HoursAgo.liquidityEth = result.data.uniswapHistoricalDatas[0].totalLiquidityInEth\n          data24HoursAgo.liquidityUsd = result.data.uniswapHistoricalDatas[0].totalLiquidityUSD\n          data24HoursAgo.txCount = result.data.uniswapHistoricalDatas[0].txCount\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n      // get two day stats\n      const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day')\n      try {\n        let resultTwoDays = await client.query({\n          query: UNISWAP_GLOBALS_24HOURS_AGO_QUERY,\n          variables: {\n            date: utcTwoDaysBack.unix()\n          },\n          fetchPolicy: 'cache-first'\n        })\n        if (resultTwoDays) {\n          // set two day data\n          data48HoursAgo.totalVolumeInEth = resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeInEth\n          data48HoursAgo.totalVolumeUSD = resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeUSD\n          data48HoursAgo.liquidityEth = resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityInEth\n          data48HoursAgo.liquidityUsd = resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityUSD\n          data48HoursAgo.txCount = resultTwoDays.data.uniswapHistoricalDatas[0].txCount\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      // 48 hour windows\n      let [volumeChangeUSD, volumePercentChangeUSD] = get2DayPercentFormatted(\n        data.totalVolumeUSD,\n        data24HoursAgo.totalVolumeUSD,\n        data48HoursAgo.totalVolumeUSD\n      )\n\n      let [volumeChangeETH, volumePercentChangeETH] = get2DayPercentFormatted(\n        data.totalVolumeInEth,\n        data24HoursAgo.totalVolumeInEth,\n        data48HoursAgo.totalVolumeInEth\n      )\n\n      let [txCountChange, txCountPercentChange] = get2DayPercentFormatted(\n        data.txCount,\n        data24HoursAgo.txCount,\n        data48HoursAgo.txCount\n      )\n\n      // regular percent changes\n      let liquidityPercentChangeETH = getPercentFormatted(data.liquidityEth, data24HoursAgo.liquidityEth)\n      let liquidityPercentChangeUSD = getPercentFormatted(data.liquidityUsd, data24HoursAgo.liquidityUsd)\n\n      data.liquidityPercentChange = liquidityPercentChangeETH\n      data.liquidityPercentChangeUSD = liquidityPercentChangeUSD\n      data.volumePercentChange = volumePercentChangeETH\n      data.volumePercentChangeUSD = volumePercentChangeUSD\n      data.txCount = txCountChange\n      data.txCountPercentChange = txCountPercentChange\n      data.dailyVolumeETH = volumeChangeETH\n      data.dailyVolumeUSD = volumeChangeUSD\n\n      setGlobalData(data)\n    }\n\n    fetchGlobalData()\n  }, [])\n\n  return globalData\n}\n"]},"metadata":{},"sourceType":"module"}