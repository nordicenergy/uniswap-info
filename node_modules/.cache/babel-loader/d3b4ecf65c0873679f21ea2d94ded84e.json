{"ast":null,"code":"import _slicedToArray from \"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { client } from '../apollo/client';\nimport { UNISWAP_CHART_QUERY } from '../apollo/queries';\nexport function useUniswapHistory(daysToQuery) {\n  dayjs.extend(utc);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        uniswapData = _useState2[0],\n        setUniswapData = _useState2[1];\n\n  useEffect(() => {\n    const fetchChartData = async function (daysToQuery) {\n      try {\n        // current time\n        const utcEndTime = dayjs.utc();\n        let utcStartTime; // go back, go way way back\n\n        switch (daysToQuery) {\n          case 'all':\n            utcStartTime = utcEndTime.subtract(1, 'year').startOf('year');\n            break;\n\n          case '3months':\n            utcStartTime = utcEndTime.subtract(3, 'month');\n            break;\n\n          case '1month':\n            utcStartTime = utcEndTime.subtract(1, 'month');\n            break;\n\n          case '1week':\n          default:\n            utcStartTime = utcEndTime.subtract(7, 'day').startOf('day');\n            break;\n        }\n\n        let startTime = utcStartTime.unix() - 1; //because we filter on greater than in the query\n\n        let data = [];\n        let dataEnd = false;\n\n        while (!dataEnd) {\n          let result = await client.query({\n            query: UNISWAP_CHART_QUERY,\n            variables: {\n              date: startTime\n            },\n            fetchPolicy: 'cache-first'\n          });\n\n          if (result) {\n            data = data.concat(result.data.uniswapDayDatas);\n\n            if (result.data.uniswapDayDatas.length !== 100) {\n              dataEnd = true;\n            } else {\n              startTime = result.data.uniswapDayDatas[result.data.uniswapDayDatas.length - 1].date;\n            }\n          }\n        }\n        /**\n         *  Format data for chart\n         */\n\n\n        data.forEach((dayData, i) => {\n          data[i].dayString = data[i].date;\n          data[i].ethVolume = parseFloat(data[i].totalVolumeInEth);\n          data[i].usdVolume = parseFloat(data[i].totalVolumeUSD);\n          data[i].dailyEthVolume = parseFloat(data[i].dailyVolumeInETH);\n          data[i].dailyUSDVolume = parseFloat(data[i].dailyVolumeInUSD);\n          data[i].ethLiquidity = parseFloat(data[i].totalLiquidityInEth);\n          data[i].usdLiquidity = parseFloat(data[i].totalLiquidityUSD);\n          data[i].txCount = parseFloat(data[i].txCount);\n        });\n        setUniswapData(data); // remove first value\n      } catch (err) {\n        console.log('error: ', err);\n      }\n    };\n\n    fetchChartData(daysToQuery);\n  }, [daysToQuery]);\n  return uniswapData;\n}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/UniswapHistory.js"],"names":["useEffect","useState","dayjs","utc","client","UNISWAP_CHART_QUERY","useUniswapHistory","daysToQuery","extend","uniswapData","setUniswapData","fetchChartData","utcEndTime","utcStartTime","subtract","startOf","startTime","unix","data","dataEnd","result","query","variables","date","fetchPolicy","concat","uniswapDayDatas","length","forEach","dayData","i","dayString","ethVolume","parseFloat","totalVolumeInEth","usdVolume","totalVolumeUSD","dailyEthVolume","dailyVolumeInETH","dailyUSDVolume","dailyVolumeInUSD","ethLiquidity","totalLiquidityInEth","usdLiquidity","totalLiquidityUSD","txCount","err","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\n\nimport { client } from '../apollo/client'\nimport { UNISWAP_CHART_QUERY } from '../apollo/queries'\n\nexport function useUniswapHistory(daysToQuery) {\n  dayjs.extend(utc)\n  const [uniswapData, setUniswapData] = useState([])\n  useEffect(() => {\n    const fetchChartData = async function(daysToQuery) {\n      try {\n        // current time\n        const utcEndTime = dayjs.utc()\n\n        let utcStartTime\n        // go back, go way way back\n        switch (daysToQuery) {\n          case 'all':\n            utcStartTime = utcEndTime.subtract(1, 'year').startOf('year')\n            break\n          case '3months':\n            utcStartTime = utcEndTime.subtract(3, 'month')\n            break\n          case '1month':\n            utcStartTime = utcEndTime.subtract(1, 'month')\n            break\n          case '1week':\n          default:\n            utcStartTime = utcEndTime.subtract(7, 'day').startOf('day')\n            break\n        }\n        let startTime = utcStartTime.unix() - 1 //because we filter on greater than in the query\n\n        let data = []\n        let dataEnd = false\n        while (!dataEnd) {\n          let result = await client.query({\n            query: UNISWAP_CHART_QUERY,\n            variables: {\n              date: startTime\n            },\n            fetchPolicy: 'cache-first'\n          })\n          if (result) {\n            data = data.concat(result.data.uniswapDayDatas)\n            if (result.data.uniswapDayDatas.length !== 100) {\n              dataEnd = true\n            } else {\n              startTime = result.data.uniswapDayDatas[result.data.uniswapDayDatas.length - 1].date\n            }\n          }\n        }\n\n        /**\n         *  Format data for chart\n         */\n        data.forEach((dayData, i) => {\n          data[i].dayString = data[i].date\n          data[i].ethVolume = parseFloat(data[i].totalVolumeInEth)\n          data[i].usdVolume = parseFloat(data[i].totalVolumeUSD)\n          data[i].dailyEthVolume = parseFloat(data[i].dailyVolumeInETH)\n          data[i].dailyUSDVolume = parseFloat(data[i].dailyVolumeInUSD)\n          data[i].ethLiquidity = parseFloat(data[i].totalLiquidityInEth)\n          data[i].usdLiquidity = parseFloat(data[i].totalLiquidityUSD)\n          data[i].txCount = parseFloat(data[i].txCount)\n        })\n        setUniswapData(data) // remove first value\n      } catch (err) {\n        console.log('error: ', err)\n      }\n    }\n    fetchChartData(daysToQuery)\n  }, [daysToQuery])\n\n  return uniswapData\n}\n"]},"metadata":{},"sourceType":"module"}