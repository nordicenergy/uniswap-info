{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-info/src/components/TransactionsList/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useMedia } from 'react-use';\nimport dayjs from 'dayjs';\nimport LocalLoader from '../LocalLoader';\nimport utc from 'dayjs/plugin/utc';\nimport { client } from '../../apollo/client';\nimport { TRANSACTIONS_QUERY_SKIPPABLE } from '../../apollo/queries';\nimport { Box, Flex, Text } from 'rebass';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Link from '../Link';\nimport { Divider } from '../../components';\nimport { urls, formatTime, Big, formattedNum } from '../../helpers';\ndayjs.extend(utc);\nconst PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n  margin-bottom: 2em;\n`;\nconst Arrow = styled.div`\n  color: #2f80ed;\n  opacity: ${props => props.faded ? 0.3 : 1};\n  padding: 0 20px;\n  user-select: none;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst List = styled(Box)`\n  -webkit-overflow-scrolling: touch;\n`;\nconst DashGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 100px 1fr 1fr;\n  grid-template-areas: 'action value Time';\n  padding: 0 6px;\n\n  > * {\n    justify-content: flex-end;\n    width: 100%;\n\n    &:first-child {\n      justify-content: flex-start;\n      text-align: left;\n      width: 100px;\n    }\n  }\n\n  @media screen and (min-width: 40em) {\n    max-width: 1280px;\n    display: grid;\n    grid-gap: 1em;\n    grid-template-columns: 180px 1fr 1fr 1fr;\n    grid-template-areas: 'action value Account Time';\n\n    > * {\n      justify-content: flex-end;\n      width: 100%;\n\n      &:first-child {\n        justify-content: flex-start;\n        width: 180px;\n      }\n    }\n  }\n\n  @media screen and (min-width: 64em) {\n    max-width: 1280px;\n    display: grid;\n    padding: 0 24px;\n    grid-gap: 1em;\n    grid-template-columns: 1.2fr 1fr 1fr 1fr 1fr 1fr;\n    grid-template-areas: 'action value ethAmount tokenAmount Account Time';\n  }\n`;\nconst ListWrapper = styled.div`\n  @media screen and (max-width: 40em) {\n    padding-right: 1rem;\n    padding-left: 1rem;\n  }\n`;\nconst CustomLink = styled(Link)`\n  margin-left: 0px;\n`;\nconst ClickableText = styled(Text)`\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n  user-select: none;\n`;\nconst EmptyTxWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  height: 80px;\n  align-items: center;\n  justify-content: center;\n`;\nconst DataText = styled(Flex)`\n  @media screen and (max-width: 40em) {\n    font-size: 14px;\n  }\n\n  align-items: center;\n  text-align: right;\n\n  & > * {\n    font-size: 1em;\n  }\n`;\nconst SORT_FIELD = {\n  TIME: 'timestamp',\n  USD_VALUE: 'usdAmount',\n  ETH_VALUE: 'ethAmount',\n  TOKEN_VALUE: 'tokenAmount'\n}; // @TODO rework into virtualized list\n\nfunction TransactionsList({\n  tokenSymbol,\n  exchangeAddress,\n  price,\n  priceUSD,\n  txFilter,\n  accountInput\n}) {\n  const [txs, setTxs] = useState([]);\n  const [swaps, SetSwaps] = useState([]);\n  const [adds, SetAdds] = useState([]);\n  const [removes, SetRemoves] = useState([]);\n  const [filteredTxs, SetFilteredTxs] = useState([]);\n  const [page, setPage] = useState(1);\n  const [maxPage, setMaxPage] = useState(1);\n  const TXS_PER_PAGE = 10;\n  const [loading, setLoading] = useState(true);\n  const [sortDirection, setSortDirection] = useState(true);\n  const [sortedColumn, setSortedColumn] = useState(SORT_FIELD.TIME);\n  useEffect(() => {\n    setMaxPage(1);\n    setPage(1);\n  }, [exchangeAddress]);\n  useEffect(() => {\n    let extraPages = 1;\n\n    if (accountInput !== '') {\n      let foundAccounts = [];\n\n      for (let x = 0; x < txs.length; x++) {\n        if (txs[x].user.toString().toUpperCase().search(accountInput.toUpperCase()) > -1) {\n          foundAccounts.push(txs[x]);\n        }\n      }\n\n      SetFilteredTxs(foundAccounts);\n\n      if (foundAccounts.length % TXS_PER_PAGE === 0) {\n        extraPages = 0;\n      }\n\n      setMaxPage(Math.floor(foundAccounts.length / TXS_PER_PAGE) + extraPages);\n    } else {\n      SetFilteredTxs(txs);\n\n      if (txs.length % TXS_PER_PAGE === 0) {\n        extraPages = 0;\n      }\n\n      setMaxPage(Math.floor(txs.length / TXS_PER_PAGE) + extraPages);\n    }\n  }, [accountInput, txs]);\n\n  function sortTxs(field) {\n    if (field === SORT_FIELD.USD_VALUE) {\n      field = SORT_FIELD.ETH_VALUE;\n    }\n\n    let newTxs = filteredTxs.slice().sort((a, b) => parseFloat(a[field]) > parseFloat(b[field]) ? (sortDirection ? -1 : 1) * -1 : (sortDirection ? -1 : 1) * 1);\n    SetFilteredTxs(newTxs);\n    setPage(1);\n  }\n\n  useEffect(() => {\n    setSortDirection(true);\n\n    switch (txFilter) {\n      case 'Add':\n        SetFilteredTxs(adds);\n        setMaxPage(Math.floor(adds.length / TXS_PER_PAGE) + 1);\n        setPage(1);\n        break;\n\n      case 'Remove':\n        SetFilteredTxs(removes);\n        setMaxPage(Math.floor(removes.length / TXS_PER_PAGE) + 1);\n        setPage(1);\n        break;\n\n      case 'Swaps':\n        SetFilteredTxs(swaps);\n        setMaxPage(Math.floor(swaps.length / TXS_PER_PAGE) + 1);\n        setPage(1);\n        break;\n\n      default:\n        SetFilteredTxs(txs);\n        setMaxPage(Math.floor(txs.length / TXS_PER_PAGE) + 1);\n        setPage(1);\n        break;\n    }\n  }, [txFilter, adds, removes, swaps, txs]);\n  /**\n   *  Fetch the overall and 24hour data for each exchange\n   *\n   * Update when exhcange changes\n   *\n   * Store results in categorized arrays for faster sorting\n   *\n   */\n\n  useEffect(() => {\n    setPage(1);\n    let ab = new AbortController();\n    setLoading(true);\n\n    async function getTxs() {\n      // current time\n      const utcEndTime = dayjs();\n      let utcStartTime;\n      utcStartTime = utcEndTime.subtract(1, 'day');\n      let startTime = utcStartTime.unix() - 1; // -1 because we filter on greater than in the query\n\n      let data = [];\n      let skipCount = 0;\n      let fetchingData = true;\n\n      while (fetchingData) {\n        ab = new AbortController();\n        let result = await client.query({\n          query: TRANSACTIONS_QUERY_SKIPPABLE,\n          variables: {\n            timestamp: startTime,\n            exchangeAddr: exchangeAddress,\n            skip: skipCount\n          },\n          fetchOptions: {\n            signal: ab.signal\n          },\n          fetchPolicy: 'network-only'\n        });\n\n        if (result) {\n          skipCount = skipCount + 100;\n\n          if (result.data.transactions.length === 0 || result.data.transactions[result.data.transactions.length - 1].timestamp < startTime) {\n            fetchingData = false;\n          }\n\n          data = data.concat(result.data.transactions);\n        }\n      }\n\n      let ts = [];\n      let newSwaps = [];\n      let newAdds = [];\n      let newRemoves = [];\n      Object.keys(data).map((item, i) => {\n        if (data[item].timestamp > startTime) {\n          if (data[item].addLiquidityEvents.length > 0) {\n            let entry;\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            };\n\n            for (entry in data[item].addLiquidityEvents) {\n              newItem.ethAmount = data[item].addLiquidityEvents[entry].ethAmount;\n              newItem.tokenAmount = data[item].addLiquidityEvents[entry].tokenAmount;\n              newItem.event = 'AddLiquidity';\n              newAdds.push(newItem);\n              ts.push(newItem);\n            }\n          }\n\n          if (data[item].removeLiquidityEvents.length > 0) {\n            let entry;\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            };\n\n            for (entry in data[item].removeLiquidityEvents) {\n              newItem.ethAmount = data[item].removeLiquidityEvents[entry].ethAmount;\n              newItem.tokenAmount = data[item].removeLiquidityEvents[entry].tokenAmount;\n              newItem.event = 'RemoveLiquidity';\n              newRemoves.push(newItem);\n              ts.push(newItem);\n            }\n          }\n\n          if (data[item].tokenPurchaseEvents.length > 0) {\n            let entry;\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            };\n\n            for (entry in data[item].tokenPurchaseEvents) {\n              newItem.ethAmount = data[item].tokenPurchaseEvents[entry].ethAmount;\n              newItem.tokenAmount = data[item].tokenPurchaseEvents[entry].tokenAmount;\n              newItem.event = 'TokenPurchase';\n              newSwaps.push(newItem);\n              ts.push(newItem);\n            }\n          }\n\n          if (data[item].ethPurchaseEvents.length > 0) {\n            let entry;\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            };\n\n            for (entry in data[item].ethPurchaseEvents) {\n              newItem.ethAmount = data[item].ethPurchaseEvents[entry].ethAmount;\n              newItem.tokenAmount = data[item].ethPurchaseEvents[entry].tokenAmount;\n              newItem.event = 'EthPurchase';\n              newSwaps.push(newItem);\n              ts.push(newItem);\n            }\n          }\n        }\n\n        return true;\n      });\n      setTxs(ts);\n      SetFilteredTxs(ts);\n      SetSwaps(newSwaps);\n      SetAdds(newAdds);\n      SetRemoves(newRemoves);\n      setLoading(false); // setTxCount(ts.length)\n\n      setMaxPage(Math.floor(ts.length / TXS_PER_PAGE) + 1);\n    }\n\n    getTxs(); // cleanup graphql call\n\n    return function cleanup() {\n      ab.abort();\n    };\n  }, [exchangeAddress]);\n\n  function getTransactionType(event, symbol) {\n    switch (event) {\n      case 'AddLiquidity':\n        return 'Add ETH and ' + symbol;\n\n      case 'RemoveLiquidity':\n        return 'Remove ETH and ' + symbol;\n\n      case 'Token Swap':\n        return 'Swap ' + symbol + ' for ETH';\n\n      case 'EthPurchase':\n        return 'Swap ' + symbol + ' for ETH';\n\n      case 'TokenPurchase':\n        return 'Swap ETH for ' + symbol;\n\n      default:\n        return '';\n    }\n  }\n\n  const belowMedium = useMedia('(max-width: 64em)');\n  const belowSmall = useMedia('(max-width: 40em)');\n\n  const TransactionItem = ({\n    transaction,\n    tokenSymbol\n  }) => {\n    return React.createElement(DashGrid, {\n      style: {\n        height: '60px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(DataText, {\n      area: 'action',\n      color: \"text\",\n      fontWeight: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(CustomLink, {\n      ml: \"3\",\n      color: \"button\",\n      external: true,\n      href: urls.showTransaction(transaction.tx.split('-')[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, getTransactionType(transaction.event, tokenSymbol))), React.createElement(DataText, {\n      area: 'value',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, price && priceUSD ? '$' + formattedNum(Big(transaction.ethAmount) * price * priceUSD * (transaction.event === 'AddLiquidity' || transaction.event === 'RemoveLiquidity' ? 2 : 1), true) : ''), !belowMedium ? React.createElement(React.Fragment, null, React.createElement(DataText, {\n      area: 'ethAmount',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, formattedNum(Big(transaction.ethAmount))), React.createElement(DataText, {\n      area: 'tokenAmount',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, formattedNum(Big(transaction.tokenAmount)))) : '', !belowSmall ? React.createElement(DataText, {\n      area: 'Account',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(Link, {\n      ml: \"3\",\n      color: \"button\",\n      external: true,\n      href: 'https://etherscan.io/address/' + transaction.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, transaction.user.slice(0, 6) + '...' + transaction.user.slice(38, 42))) : '', React.createElement(DataText, {\n      area: 'Time',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, formatTime(transaction.timestamp)));\n  };\n\n  return React.createElement(ListWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }, React.createElement(DashGrid, {\n    center: true,\n    style: {\n      height: '60px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, React.createElement(Flex, {\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440\n    },\n    __self: this\n  }, React.createElement(Text, {\n    color: \"text\",\n    area: 'action',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }, \"Transactions (24h)\")), React.createElement(Flex, {\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445\n    },\n    __self: this\n  }, React.createElement(ClickableText, {\n    area: 'value',\n    color: \"textDim\",\n    onClick: e => {\n      setSortedColumn(SORT_FIELD.USD_VALUE);\n      setSortDirection(!sortDirection);\n      sortTxs(SORT_FIELD.USD_VALUE);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446\n    },\n    __self: this\n  }, \"Value \", sortedColumn === SORT_FIELD.USD_VALUE ? !sortDirection ? '↑' : '↓' : '')), !belowMedium ? React.createElement(React.Fragment, null, React.createElement(Flex, {\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460\n    },\n    __self: this\n  }, React.createElement(ClickableText, {\n    area: 'ethAmount',\n    color: \"textDim\",\n    onClick: e => {\n      setSortedColumn(SORT_FIELD.ETH_VALUE);\n      setSortDirection(!sortDirection);\n      sortTxs(SORT_FIELD.ETH_VALUE);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461\n    },\n    __self: this\n  }, \"ETH Amount \", sortedColumn === SORT_FIELD.ETH_VALUE ? !sortDirection ? '↑' : '↓' : '')), React.createElement(Flex, {\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473\n    },\n    __self: this\n  }, React.createElement(ClickableText, {\n    area: 'tokenAmount',\n    color: \"textDim\",\n    onClick: e => {\n      setSortedColumn(SORT_FIELD.TOKEN_VALUE);\n      setSortDirection(!sortDirection);\n      sortTxs(SORT_FIELD.TOKEN_VALUE);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474\n    },\n    __self: this\n  }, \"Token Amount \", sortedColumn === SORT_FIELD.TOKEN_VALUE ? !sortDirection ? '↑' : '↓' : ''))) : '', !belowSmall ? React.createElement(Flex, {\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491\n    },\n    __self: this\n  }, React.createElement(Text, {\n    area: 'Account',\n    color: \"textDim\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492\n    },\n    __self: this\n  }, \"Account\")) : '', React.createElement(Flex, {\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499\n    },\n    __self: this\n  }, React.createElement(ClickableText, {\n    area: 'time',\n    color: \"textDim\",\n    onClick: e => {\n      setSortedColumn(SORT_FIELD.TIME);\n      setSortDirection(!sortDirection);\n      sortTxs(SORT_FIELD.TIME);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }, \"Time \", sortedColumn === SORT_FIELD.TIME ? !sortDirection ? '↑' : '↓' : ''))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }), React.createElement(List, {\n    p: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514\n    },\n    __self: this\n  }, !loading && txs && filteredTxs.length === 0 ? React.createElement(EmptyTxWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516\n    },\n    __self: this\n  }, \"No transactions in last 24 hours\") : '', loading ? React.createElement(LocalLoader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521\n    },\n    __self: this\n  }) : filteredTxs.slice(TXS_PER_PAGE * (page - 1), page * TXS_PER_PAGE).map((tx, index) => {\n    return React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(TransactionItem, {\n      key: index,\n      transaction: tx,\n      tokenSymbol: tokenSymbol,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }));\n  })), React.createElement(PageButtons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: e => {\n      setPage(page === 1 ? page : page - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534\n    },\n    __self: this\n  }, React.createElement(Arrow, {\n    faded: page === 1 ? true : false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539\n    },\n    __self: this\n  }, \"\\u2190\")), 'Page ' + page + ' of ' + maxPage, React.createElement(\"div\", {\n    onClick: e => {\n      setPage(page === maxPage ? page : page + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542\n    },\n    __self: this\n  }, React.createElement(Arrow, {\n    faded: page === maxPage ? true : false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547\n    },\n    __self: this\n  }, \"\\u2192\"))));\n}\n\nTransactionsList.defaultProps = {\n  transactions: []\n};\nTransactionsList.propTypes = {\n  transactions: PropTypes.array.isRequired\n};\nexport default TransactionsList;","map":{"version":3,"sources":["/workspace/uniswap-info/src/components/TransactionsList/index.js"],"names":["React","useState","useEffect","useMedia","dayjs","LocalLoader","utc","client","TRANSACTIONS_QUERY_SKIPPABLE","Box","Flex","Text","PropTypes","styled","Link","Divider","urls","formatTime","Big","formattedNum","extend","PageButtons","div","Arrow","props","faded","List","DashGrid","ListWrapper","CustomLink","ClickableText","EmptyTxWrapper","DataText","SORT_FIELD","TIME","USD_VALUE","ETH_VALUE","TOKEN_VALUE","TransactionsList","tokenSymbol","exchangeAddress","price","priceUSD","txFilter","accountInput","txs","setTxs","swaps","SetSwaps","adds","SetAdds","removes","SetRemoves","filteredTxs","SetFilteredTxs","page","setPage","maxPage","setMaxPage","TXS_PER_PAGE","loading","setLoading","sortDirection","setSortDirection","sortedColumn","setSortedColumn","extraPages","foundAccounts","x","length","user","toString","toUpperCase","search","push","Math","floor","sortTxs","field","newTxs","slice","sort","a","b","parseFloat","ab","AbortController","getTxs","utcEndTime","utcStartTime","subtract","startTime","unix","data","skipCount","fetchingData","result","query","variables","timestamp","exchangeAddr","skip","fetchOptions","signal","fetchPolicy","transactions","concat","ts","newSwaps","newAdds","newRemoves","Object","keys","map","item","i","addLiquidityEvents","entry","newItem","tx","id","ethAmount","tokenAmount","event","removeLiquidityEvents","tokenPurchaseEvents","ethPurchaseEvents","cleanup","abort","getTransactionType","symbol","belowMedium","belowSmall","TransactionItem","transaction","height","showTransaction","split","e","index","defaultProps","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useMedia } from 'react-use'\nimport dayjs from 'dayjs'\nimport LocalLoader from '../LocalLoader'\nimport utc from 'dayjs/plugin/utc'\nimport { client } from '../../apollo/client'\nimport { TRANSACTIONS_QUERY_SKIPPABLE } from '../../apollo/queries'\nimport { Box, Flex, Text } from 'rebass'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport Link from '../Link'\nimport { Divider } from '../../components'\n\nimport { urls, formatTime, Big, formattedNum } from '../../helpers'\n\ndayjs.extend(utc)\n\nconst PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n  margin-bottom: 2em;\n`\n\nconst Arrow = styled.div`\n  color: #2f80ed;\n  opacity: ${props => (props.faded ? 0.3 : 1)};\n  padding: 0 20px;\n  user-select: none;\n\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst List = styled(Box)`\n  -webkit-overflow-scrolling: touch;\n`\n\nconst DashGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 100px 1fr 1fr;\n  grid-template-areas: 'action value Time';\n  padding: 0 6px;\n\n  > * {\n    justify-content: flex-end;\n    width: 100%;\n\n    &:first-child {\n      justify-content: flex-start;\n      text-align: left;\n      width: 100px;\n    }\n  }\n\n  @media screen and (min-width: 40em) {\n    max-width: 1280px;\n    display: grid;\n    grid-gap: 1em;\n    grid-template-columns: 180px 1fr 1fr 1fr;\n    grid-template-areas: 'action value Account Time';\n\n    > * {\n      justify-content: flex-end;\n      width: 100%;\n\n      &:first-child {\n        justify-content: flex-start;\n        width: 180px;\n      }\n    }\n  }\n\n  @media screen and (min-width: 64em) {\n    max-width: 1280px;\n    display: grid;\n    padding: 0 24px;\n    grid-gap: 1em;\n    grid-template-columns: 1.2fr 1fr 1fr 1fr 1fr 1fr;\n    grid-template-areas: 'action value ethAmount tokenAmount Account Time';\n  }\n`\n\nconst ListWrapper = styled.div`\n  @media screen and (max-width: 40em) {\n    padding-right: 1rem;\n    padding-left: 1rem;\n  }\n`\n\nconst CustomLink = styled(Link)`\n  margin-left: 0px;\n`\n\nconst ClickableText = styled(Text)`\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n  user-select: none;\n`\n\nconst EmptyTxWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  height: 80px;\n  align-items: center;\n  justify-content: center;\n`\n\nconst DataText = styled(Flex)`\n  @media screen and (max-width: 40em) {\n    font-size: 14px;\n  }\n\n  align-items: center;\n  text-align: right;\n\n  & > * {\n    font-size: 1em;\n  }\n`\n\nconst SORT_FIELD = {\n  TIME: 'timestamp',\n  USD_VALUE: 'usdAmount',\n  ETH_VALUE: 'ethAmount',\n  TOKEN_VALUE: 'tokenAmount'\n}\n\n// @TODO rework into virtualized list\nfunction TransactionsList({ tokenSymbol, exchangeAddress, price, priceUSD, txFilter, accountInput }) {\n  const [txs, setTxs] = useState([])\n\n  const [swaps, SetSwaps] = useState([])\n\n  const [adds, SetAdds] = useState([])\n\n  const [removes, SetRemoves] = useState([])\n\n  const [filteredTxs, SetFilteredTxs] = useState([])\n\n  const [page, setPage] = useState(1)\n\n  const [maxPage, setMaxPage] = useState(1)\n\n  const TXS_PER_PAGE = 10\n\n  const [loading, setLoading] = useState(true)\n\n  const [sortDirection, setSortDirection] = useState(true)\n\n  const [sortedColumn, setSortedColumn] = useState(SORT_FIELD.TIME)\n\n  useEffect(() => {\n    setMaxPage(1)\n    setPage(1)\n  }, [exchangeAddress])\n\n  useEffect(() => {\n    let extraPages = 1\n    if (accountInput !== '') {\n      let foundAccounts = []\n      for (let x = 0; x < txs.length; x++) {\n        if (\n          txs[x].user\n            .toString()\n            .toUpperCase()\n            .search(accountInput.toUpperCase()) > -1\n        ) {\n          foundAccounts.push(txs[x])\n        }\n      }\n      SetFilteredTxs(foundAccounts)\n      if (foundAccounts.length % TXS_PER_PAGE === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(foundAccounts.length / TXS_PER_PAGE) + extraPages)\n    } else {\n      SetFilteredTxs(txs)\n      if (txs.length % TXS_PER_PAGE === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(txs.length / TXS_PER_PAGE) + extraPages)\n    }\n  }, [accountInput, txs])\n\n  function sortTxs(field) {\n    if (field === SORT_FIELD.USD_VALUE) {\n      field = SORT_FIELD.ETH_VALUE\n    }\n    let newTxs = filteredTxs\n      .slice()\n      .sort((a, b) =>\n        parseFloat(a[field]) > parseFloat(b[field]) ? (sortDirection ? -1 : 1) * -1 : (sortDirection ? -1 : 1) * 1\n      )\n    SetFilteredTxs(newTxs)\n    setPage(1)\n  }\n\n  useEffect(() => {\n    setSortDirection(true)\n    switch (txFilter) {\n      case 'Add':\n        SetFilteredTxs(adds)\n        setMaxPage(Math.floor(adds.length / TXS_PER_PAGE) + 1)\n        setPage(1)\n        break\n      case 'Remove':\n        SetFilteredTxs(removes)\n        setMaxPage(Math.floor(removes.length / TXS_PER_PAGE) + 1)\n        setPage(1)\n        break\n      case 'Swaps':\n        SetFilteredTxs(swaps)\n        setMaxPage(Math.floor(swaps.length / TXS_PER_PAGE) + 1)\n        setPage(1)\n        break\n      default:\n        SetFilteredTxs(txs)\n        setMaxPage(Math.floor(txs.length / TXS_PER_PAGE) + 1)\n        setPage(1)\n        break\n    }\n  }, [txFilter, adds, removes, swaps, txs])\n\n  /**\n   *  Fetch the overall and 24hour data for each exchange\n   *\n   * Update when exhcange changes\n   *\n   * Store results in categorized arrays for faster sorting\n   *\n   */\n  useEffect(() => {\n    setPage(1)\n    let ab = new AbortController()\n    setLoading(true)\n    async function getTxs() {\n      // current time\n      const utcEndTime = dayjs()\n      let utcStartTime\n      utcStartTime = utcEndTime.subtract(1, 'day')\n      let startTime = utcStartTime.unix() - 1 // -1 because we filter on greater than in the query\n      let data = []\n      let skipCount = 0\n      let fetchingData = true\n\n      while (fetchingData) {\n        ab = new AbortController()\n        let result = await client.query({\n          query: TRANSACTIONS_QUERY_SKIPPABLE,\n          variables: {\n            timestamp: startTime,\n            exchangeAddr: exchangeAddress,\n            skip: skipCount\n          },\n          fetchOptions: {\n            signal: ab.signal\n          },\n          fetchPolicy: 'network-only'\n        })\n        if (result) {\n          skipCount = skipCount + 100\n          if (\n            result.data.transactions.length === 0 ||\n            result.data.transactions[result.data.transactions.length - 1].timestamp < startTime\n          ) {\n            fetchingData = false\n          }\n          data = data.concat(result.data.transactions)\n        }\n      }\n\n      let ts = []\n      let newSwaps = []\n      let newAdds = []\n      let newRemoves = []\n      Object.keys(data).map((item, i) => {\n        if (data[item].timestamp > startTime) {\n          if (data[item].addLiquidityEvents.length > 0) {\n            let entry\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            }\n            for (entry in data[item].addLiquidityEvents) {\n              newItem.ethAmount = data[item].addLiquidityEvents[entry].ethAmount\n              newItem.tokenAmount = data[item].addLiquidityEvents[entry].tokenAmount\n              newItem.event = 'AddLiquidity'\n              newAdds.push(newItem)\n              ts.push(newItem)\n            }\n          }\n          if (data[item].removeLiquidityEvents.length > 0) {\n            let entry\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            }\n            for (entry in data[item].removeLiquidityEvents) {\n              newItem.ethAmount = data[item].removeLiquidityEvents[entry].ethAmount\n              newItem.tokenAmount = data[item].removeLiquidityEvents[entry].tokenAmount\n              newItem.event = 'RemoveLiquidity'\n              newRemoves.push(newItem)\n              ts.push(newItem)\n            }\n          }\n          if (data[item].tokenPurchaseEvents.length > 0) {\n            let entry\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            }\n            for (entry in data[item].tokenPurchaseEvents) {\n              newItem.ethAmount = data[item].tokenPurchaseEvents[entry].ethAmount\n              newItem.tokenAmount = data[item].tokenPurchaseEvents[entry].tokenAmount\n              newItem.event = 'TokenPurchase'\n              newSwaps.push(newItem)\n              ts.push(newItem)\n            }\n          }\n          if (data[item].ethPurchaseEvents.length > 0) {\n            let entry\n            let newItem = {\n              tx: data[item].id,\n              ethAmount: '',\n              tokenAmount: '',\n              user: data[item].user,\n              timestamp: data[item].timestamp\n            }\n            for (entry in data[item].ethPurchaseEvents) {\n              newItem.ethAmount = data[item].ethPurchaseEvents[entry].ethAmount\n              newItem.tokenAmount = data[item].ethPurchaseEvents[entry].tokenAmount\n              newItem.event = 'EthPurchase'\n              newSwaps.push(newItem)\n              ts.push(newItem)\n            }\n          }\n        }\n        return true\n      })\n      setTxs(ts)\n      SetFilteredTxs(ts)\n      SetSwaps(newSwaps)\n      SetAdds(newAdds)\n      SetRemoves(newRemoves)\n      setLoading(false)\n      // setTxCount(ts.length)\n      setMaxPage(Math.floor(ts.length / TXS_PER_PAGE) + 1)\n    }\n    getTxs()\n\n    // cleanup graphql call\n    return function cleanup() {\n      ab.abort()\n    }\n  }, [exchangeAddress])\n\n  function getTransactionType(event, symbol) {\n    switch (event) {\n      case 'AddLiquidity':\n        return 'Add ETH and ' + symbol\n      case 'RemoveLiquidity':\n        return 'Remove ETH and ' + symbol\n      case 'Token Swap':\n        return 'Swap ' + symbol + ' for ETH'\n      case 'EthPurchase':\n        return 'Swap ' + symbol + ' for ETH'\n      case 'TokenPurchase':\n        return 'Swap ETH for ' + symbol\n\n      default:\n        return ''\n    }\n  }\n\n  const belowMedium = useMedia('(max-width: 64em)')\n\n  const belowSmall = useMedia('(max-width: 40em)')\n\n  const TransactionItem = ({ transaction, tokenSymbol }) => {\n    return (\n      <DashGrid style={{ height: '60px' }}>\n        <DataText area={'action'} color=\"text\" fontWeight=\"500\">\n          <CustomLink ml=\"3\" color=\"button\" external href={urls.showTransaction(transaction.tx.split('-')[0])}>\n            {getTransactionType(transaction.event, tokenSymbol)}\n          </CustomLink>\n        </DataText>\n        <DataText area={'value'}>\n          {price && priceUSD\n            ? '$' +\n              formattedNum(\n                Big(transaction.ethAmount) *\n                  price *\n                  priceUSD *\n                  (transaction.event === 'AddLiquidity' || transaction.event === 'RemoveLiquidity' ? 2 : 1),\n                true\n              )\n            : ''}\n        </DataText>\n        {!belowMedium ? (\n          <>\n            <DataText area={'ethAmount'}>{formattedNum(Big(transaction.ethAmount))}</DataText>\n            <DataText area={'tokenAmount'}>{formattedNum(Big(transaction.tokenAmount))}</DataText>\n          </>\n        ) : (\n          ''\n        )}\n        {!belowSmall ? (\n          <DataText area={'Account'}>\n            <Link ml=\"3\" color=\"button\" external href={'https://etherscan.io/address/' + transaction.user}>\n              {transaction.user.slice(0, 6) + '...' + transaction.user.slice(38, 42)}\n            </Link>\n          </DataText>\n        ) : (\n          ''\n        )}\n        <DataText area={'Time'}>{formatTime(transaction.timestamp)}</DataText>\n      </DashGrid>\n    )\n  }\n\n  return (\n    <ListWrapper>\n      <DashGrid center={true} style={{ height: '60px' }}>\n        <Flex alignItems=\"center\">\n          <Text color=\"text\" area={'action'}>\n            Transactions (24h)\n          </Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ClickableText\n            area={'value'}\n            color=\"textDim\"\n            onClick={e => {\n              setSortedColumn(SORT_FIELD.USD_VALUE)\n              setSortDirection(!sortDirection)\n              sortTxs(SORT_FIELD.USD_VALUE)\n            }}\n          >\n            Value {sortedColumn === SORT_FIELD.USD_VALUE ? (!sortDirection ? '↑' : '↓') : ''}\n          </ClickableText>\n        </Flex>\n        {!belowMedium ? (\n          <>\n            <Flex alignItems=\"center\">\n              <ClickableText\n                area={'ethAmount'}\n                color=\"textDim\"\n                onClick={e => {\n                  setSortedColumn(SORT_FIELD.ETH_VALUE)\n                  setSortDirection(!sortDirection)\n                  sortTxs(SORT_FIELD.ETH_VALUE)\n                }}\n              >\n                ETH Amount {sortedColumn === SORT_FIELD.ETH_VALUE ? (!sortDirection ? '↑' : '↓') : ''}\n              </ClickableText>\n            </Flex>\n            <Flex alignItems=\"center\">\n              <ClickableText\n                area={'tokenAmount'}\n                color=\"textDim\"\n                onClick={e => {\n                  setSortedColumn(SORT_FIELD.TOKEN_VALUE)\n                  setSortDirection(!sortDirection)\n                  sortTxs(SORT_FIELD.TOKEN_VALUE)\n                }}\n              >\n                Token Amount {sortedColumn === SORT_FIELD.TOKEN_VALUE ? (!sortDirection ? '↑' : '↓') : ''}\n              </ClickableText>\n            </Flex>\n          </>\n        ) : (\n          ''\n        )}\n        {!belowSmall ? (\n          <Flex alignItems=\"center\">\n            <Text area={'Account'} color=\"textDim\">\n              Account\n            </Text>\n          </Flex>\n        ) : (\n          ''\n        )}\n        <Flex alignItems=\"center\">\n          <ClickableText\n            area={'time'}\n            color=\"textDim\"\n            onClick={e => {\n              setSortedColumn(SORT_FIELD.TIME)\n              setSortDirection(!sortDirection)\n              sortTxs(SORT_FIELD.TIME)\n            }}\n          >\n            Time {sortedColumn === SORT_FIELD.TIME ? (!sortDirection ? '↑' : '↓') : ''}\n          </ClickableText>\n        </Flex>\n      </DashGrid>\n      <Divider />\n      <List p={0}>\n        {!loading && txs && filteredTxs.length === 0 ? (\n          <EmptyTxWrapper>No transactions in last 24 hours</EmptyTxWrapper>\n        ) : (\n          ''\n        )}\n        {loading ? (\n          <LocalLoader />\n        ) : (\n          filteredTxs.slice(TXS_PER_PAGE * (page - 1), page * TXS_PER_PAGE).map((tx, index) => {\n            return (\n              <div key={index}>\n                <TransactionItem key={index} transaction={tx} tokenSymbol={tokenSymbol} />\n                <Divider />\n              </div>\n            )\n          })\n        )}\n      </List>\n      <PageButtons>\n        <div\n          onClick={e => {\n            setPage(page === 1 ? page : page - 1)\n          }}\n        >\n          <Arrow faded={page === 1 ? true : false}>←</Arrow>\n        </div>\n        {'Page ' + page + ' of ' + maxPage}\n        <div\n          onClick={e => {\n            setPage(page === maxPage ? page : page + 1)\n          }}\n        >\n          <Arrow faded={page === maxPage ? true : false}>→</Arrow>\n        </div>\n      </PageButtons>\n    </ListWrapper>\n  )\n}\n\nTransactionsList.defaultProps = {\n  transactions: []\n}\n\nTransactionsList.propTypes = {\n  transactions: PropTypes.array.isRequired\n}\n\nexport default TransactionsList\n"]},"metadata":{},"sourceType":"module"}