{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function getClosestBody(el) {\n  if (!el) {\n    return null;\n  } else if (el.tagName === 'BODY') {\n    return el;\n  } else if (el.tagName === 'IFRAME') {\n    var document_1 = el.contentDocument;\n    return document_1 ? document_1.body : null;\n  } else if (!el.offsetParent) {\n    return null;\n  }\n\n  return getClosestBody(el.offsetParent);\n}\nvar bodies = new Map();\nvar doc = typeof document === 'object' ? document : undefined;\nexport default !doc ? function useLockBodyMock(_locked, _elementRef) {\n  if (_locked === void 0) {\n    _locked = true;\n  }\n} : function useLockBody(locked, elementRef) {\n  if (locked === void 0) {\n    locked = true;\n  }\n\n  elementRef = elementRef || useRef(doc.body);\n  useEffect(function () {\n    var body = getClosestBody(elementRef.current);\n\n    if (!body) {\n      return;\n    }\n\n    var bodyInfo = bodies.get(body);\n\n    if (locked) {\n      if (!bodyInfo) {\n        bodies.set(body, {\n          counter: 1,\n          initialOverflow: body.style.overflow\n        });\n        body.style.overflow = 'hidden';\n      } else {\n        bodies.set(body, {\n          counter: bodyInfo.counter + 1,\n          initialOverflow: bodyInfo.initialOverflow\n        });\n      }\n    } else {\n      if (bodyInfo) {\n        if (bodyInfo.counter === 1) {\n          bodies.delete(body);\n          body.style.overflow = bodyInfo.initialOverflow;\n        } else {\n          bodies.set(body, {\n            counter: bodyInfo.counter - 1,\n            initialOverflow: bodyInfo.initialOverflow\n          });\n        }\n      }\n    }\n  }, [locked, elementRef.current]);\n};","map":{"version":3,"sources":["/workspace/uniswap-info/node_modules/react-use/esm/useLockBodyScroll.js"],"names":["useEffect","useRef","getClosestBody","el","tagName","document_1","contentDocument","body","offsetParent","bodies","Map","doc","document","undefined","useLockBodyMock","_locked","_elementRef","useLockBody","locked","elementRef","current","bodyInfo","get","set","counter","initialOverflow","style","overflow","delete"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAA4B;AAC/B,MAAI,CAACA,EAAL,EAAS;AACL,WAAO,IAAP;AACH,GAFD,MAGK,IAAIA,EAAE,CAACC,OAAH,KAAe,MAAnB,EAA2B;AAC5B,WAAOD,EAAP;AACH,GAFI,MAGA,IAAIA,EAAE,CAACC,OAAH,KAAe,QAAnB,EAA6B;AAC9B,QAAIC,UAAU,GAAGF,EAAE,CAACG,eAApB;AACA,WAAOD,UAAU,GAAGA,UAAU,CAACE,IAAd,GAAqB,IAAtC;AACH,GAHI,MAIA,IAAI,CAACJ,EAAE,CAACK,YAAR,EAAsB;AACvB,WAAO,IAAP;AACH;;AACD,SAAON,cAAc,CAACC,EAAE,CAACK,YAAJ,CAArB;AACH;AACD,IAAIC,MAAM,GAAG,IAAIC,GAAJ,EAAb;AACA,IAAIC,GAAG,GAAG,OAAOC,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CC,SAApD;AACA,eAAe,CAACF,GAAD,GACT,SAASG,eAAT,CAAyBC,OAAzB,EAAkCC,WAAlC,EAA+C;AAC7C,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,IAAV;AAAiB;AAC9C,CAHU,GAIT,SAASE,WAAT,CAAqBC,MAArB,EAA6BC,UAA7B,EAAyC;AACvC,MAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,IAAT;AAAgB;;AACzCC,EAAAA,UAAU,GAAGA,UAAU,IAAIlB,MAAM,CAACU,GAAG,CAACJ,IAAL,CAAjC;AACAP,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIO,IAAI,GAAGL,cAAc,CAACiB,UAAU,CAACC,OAAZ,CAAzB;;AACA,QAAI,CAACb,IAAL,EAAW;AACP;AACH;;AACD,QAAIc,QAAQ,GAAGZ,MAAM,CAACa,GAAP,CAAWf,IAAX,CAAf;;AACA,QAAIW,MAAJ,EAAY;AACR,UAAI,CAACG,QAAL,EAAe;AACXZ,QAAAA,MAAM,CAACc,GAAP,CAAWhB,IAAX,EAAiB;AAAEiB,UAAAA,OAAO,EAAE,CAAX;AAAcC,UAAAA,eAAe,EAAElB,IAAI,CAACmB,KAAL,CAAWC;AAA1C,SAAjB;AACApB,QAAAA,IAAI,CAACmB,KAAL,CAAWC,QAAX,GAAsB,QAAtB;AACH,OAHD,MAIK;AACDlB,QAAAA,MAAM,CAACc,GAAP,CAAWhB,IAAX,EAAiB;AAAEiB,UAAAA,OAAO,EAAEH,QAAQ,CAACG,OAAT,GAAmB,CAA9B;AAAiCC,UAAAA,eAAe,EAAEJ,QAAQ,CAACI;AAA3D,SAAjB;AACH;AACJ,KARD,MASK;AACD,UAAIJ,QAAJ,EAAc;AACV,YAAIA,QAAQ,CAACG,OAAT,KAAqB,CAAzB,EAA4B;AACxBf,UAAAA,MAAM,CAACmB,MAAP,CAAcrB,IAAd;AACAA,UAAAA,IAAI,CAACmB,KAAL,CAAWC,QAAX,GAAsBN,QAAQ,CAACI,eAA/B;AACH,SAHD,MAIK;AACDhB,UAAAA,MAAM,CAACc,GAAP,CAAWhB,IAAX,EAAiB;AAAEiB,YAAAA,OAAO,EAAEH,QAAQ,CAACG,OAAT,GAAmB,CAA9B;AAAiCC,YAAAA,eAAe,EAAEJ,QAAQ,CAACI;AAA3D,WAAjB;AACH;AACJ;AACJ;AACJ,GA1BQ,EA0BN,CAACP,MAAD,EAASC,UAAU,CAACC,OAApB,CA1BM,CAAT;AA2BH,CAlCL","sourcesContent":["import { useEffect, useRef } from 'react';\nexport function getClosestBody(el) {\n    if (!el) {\n        return null;\n    }\n    else if (el.tagName === 'BODY') {\n        return el;\n    }\n    else if (el.tagName === 'IFRAME') {\n        var document_1 = el.contentDocument;\n        return document_1 ? document_1.body : null;\n    }\n    else if (!el.offsetParent) {\n        return null;\n    }\n    return getClosestBody(el.offsetParent);\n}\nvar bodies = new Map();\nvar doc = typeof document === 'object' ? document : undefined;\nexport default !doc\n    ? function useLockBodyMock(_locked, _elementRef) {\n        if (_locked === void 0) { _locked = true; }\n    }\n    : function useLockBody(locked, elementRef) {\n        if (locked === void 0) { locked = true; }\n        elementRef = elementRef || useRef(doc.body);\n        useEffect(function () {\n            var body = getClosestBody(elementRef.current);\n            if (!body) {\n                return;\n            }\n            var bodyInfo = bodies.get(body);\n            if (locked) {\n                if (!bodyInfo) {\n                    bodies.set(body, { counter: 1, initialOverflow: body.style.overflow });\n                    body.style.overflow = 'hidden';\n                }\n                else {\n                    bodies.set(body, { counter: bodyInfo.counter + 1, initialOverflow: bodyInfo.initialOverflow });\n                }\n            }\n            else {\n                if (bodyInfo) {\n                    if (bodyInfo.counter === 1) {\n                        bodies.delete(body);\n                        body.style.overflow = bodyInfo.initialOverflow;\n                    }\n                    else {\n                        bodies.set(body, { counter: bodyInfo.counter - 1, initialOverflow: bodyInfo.initialOverflow });\n                    }\n                }\n            }\n        }, [locked, elementRef.current]);\n    };\n"]},"metadata":{},"sourceType":"module"}