{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useState, useMemo } from 'react';\n\nvar useMap = function (initialMap) {\n  if (initialMap === void 0) {\n    initialMap = {};\n  }\n\n  var _a = useState(initialMap),\n      map = _a[0],\n      set = _a[1];\n\n  var utils = useMemo(function () {\n    return {\n      get: function (key) {\n        return map[key];\n      },\n      set: function (key, entry) {\n        set(function (prevMap) {\n          var _a;\n\n          return __assign({}, prevMap, (_a = {}, _a[key] = entry, _a));\n        });\n      },\n      remove: function (key) {\n        set(function (prevMap) {\n          var _a = key,\n              omit = prevMap[_a],\n              rest = __rest(prevMap, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n\n          return rest;\n        });\n      },\n      reset: function () {\n        return set(initialMap);\n      }\n    };\n  }, [set]);\n  return [map, utils];\n};\n\nexport default useMap;","map":null,"metadata":{},"sourceType":"module"}