{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-info/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport { client } from './apollo/client';\nimport { Route, Switch, BrowserRouter, withRouter, Redirect } from 'react-router-dom';\nimport Wrapper from './components/Theme';\nimport NavHeader from './components/NavHeader';\nimport { ExchangeWrapper } from './pages/ExchangeWrapper';\nimport { OverviewPage } from './pages/OverviewPage';\nimport { useGlobalData } from './Data/GlobalData';\nimport { useUniswapHistory } from './Data/UniswapHistory';\nimport { timeframeOptions } from './constants';\nimport { useAllExchanges } from './Data/GetAllExchanges';\nimport LocalLoader from './components/LocalLoader';\n\nfunction App(props) {\n  // set default time box to all time\n  const [historyDaysToQuery, setHistoryDaysToQuery] = useState(timeframeOptions[3].value); // currency across site can be USD or ETH\n\n  const [currencyUnit, setCurrencyUnit] = useState('USD'); // historical data for chart on overview page\n\n  const uniswapHistory = useUniswapHistory(historyDaysToQuery); // data for Uniswap totals on overview page, may be dependent on values in the future\n\n  const globalData = useGlobalData(); // essential data for each exchange above liqudiity threshold\n\n  const exchanges = useAllExchanges(); //used for route loading\n\n  const [length, setLength] = useState(0);\n  const [tokenToExchangeMap, setTokenToExchangeMap] = useState();\n  useEffect(() => {\n    if (exchanges) {\n      setLength(Object.keys(exchanges).length);\n    }\n\n    let newSet = {};\n    Object.keys(exchanges).map(key => {\n      newSet[exchanges[key].tokenAddress.toLowerCase()] = key;\n      return true;\n    });\n    setTokenToExchangeMap(newSet);\n  }, [exchanges]);\n  const NavHeaderUpdated = withRouter(props => React.createElement(NavHeader, Object.assign({\n    default: true\n  }, props, {\n    exchanges: exchanges,\n    currencyUnit: currencyUnit,\n    setCurrencyUnit: setCurrencyUnit,\n    setHistoryDaysToQuery: setHistoryDaysToQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })));\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, globalData && uniswapHistory && length > 0 ? React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(NavHeaderUpdated, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    strict: true,\n    path: \"/token/:tokenAddressURL?\",\n    render: ({\n      match\n    }) => {\n      if (exchanges && tokenToExchangeMap.hasOwnProperty(match.params.tokenAddressURL.toLowerCase())) {\n        return React.createElement(ExchangeWrapper, {\n          currencyUnit: currencyUnit,\n          address: tokenToExchangeMap[match.params.tokenAddressURL.toLowerCase()],\n          exchanges: exchanges,\n          historyDaysToQuery: historyDaysToQuery,\n          setHistoryDaysToQuery: setHistoryDaysToQuery,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(Redirect, {\n          to: \"/home\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(OverviewPage, {\n    currencyUnit: currencyUnit,\n    globalData: globalData,\n    uniswapHistory: uniswapHistory,\n    historyDaysToQuery: historyDaysToQuery,\n    updateTimeframe: setHistoryDaysToQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(Redirect, {\n    to: \"/home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))) : React.createElement(LocalLoader, {\n    fill: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/workspace/uniswap-info/src/App.js"],"names":["React","useState","useEffect","ApolloProvider","client","Route","Switch","BrowserRouter","withRouter","Redirect","Wrapper","NavHeader","ExchangeWrapper","OverviewPage","useGlobalData","useUniswapHistory","timeframeOptions","useAllExchanges","LocalLoader","App","props","historyDaysToQuery","setHistoryDaysToQuery","value","currencyUnit","setCurrencyUnit","uniswapHistory","globalData","exchanges","length","setLength","tokenToExchangeMap","setTokenToExchangeMap","Object","keys","newSet","map","key","tokenAddress","toLowerCase","NavHeaderUpdated","position","match","hasOwnProperty","params","tokenAddressURL"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { client } from './apollo/client'\nimport { Route, Switch, BrowserRouter, withRouter, Redirect } from 'react-router-dom'\nimport Wrapper from './components/Theme'\nimport NavHeader from './components/NavHeader'\nimport { ExchangeWrapper } from './pages/ExchangeWrapper'\nimport { OverviewPage } from './pages/OverviewPage'\nimport { useGlobalData } from './Data/GlobalData'\nimport { useUniswapHistory } from './Data/UniswapHistory'\nimport { timeframeOptions } from './constants'\nimport { useAllExchanges } from './Data/GetAllExchanges'\nimport LocalLoader from './components/LocalLoader'\n\nfunction App(props) {\n  // set default time box to all time\n  const [historyDaysToQuery, setHistoryDaysToQuery] = useState(timeframeOptions[3].value)\n\n  // currency across site can be USD or ETH\n  const [currencyUnit, setCurrencyUnit] = useState('USD')\n\n  // historical data for chart on overview page\n  const uniswapHistory = useUniswapHistory(historyDaysToQuery)\n\n  // data for Uniswap totals on overview page, may be dependent on values in the future\n  const globalData = useGlobalData()\n\n  // essential data for each exchange above liqudiity threshold\n  const exchanges = useAllExchanges()\n\n  //used for route loading\n  const [length, setLength] = useState(0)\n\n  const [tokenToExchangeMap, setTokenToExchangeMap] = useState()\n\n  useEffect(() => {\n    if (exchanges) {\n      setLength(Object.keys(exchanges).length)\n    }\n    let newSet = {}\n    Object.keys(exchanges).map(key => {\n      newSet[exchanges[key].tokenAddress.toLowerCase()] = key\n      return true\n    })\n    setTokenToExchangeMap(newSet)\n  }, [exchanges])\n\n  const NavHeaderUpdated = withRouter(props => (\n    <NavHeader\n      default\n      {...props}\n      exchanges={exchanges}\n      currencyUnit={currencyUnit}\n      setCurrencyUnit={setCurrencyUnit}\n      setHistoryDaysToQuery={setHistoryDaysToQuery}\n    />\n  ))\n\n  return (\n    <ApolloProvider client={client}>\n      <Wrapper>\n        <div style={{ position: 'relative' }}>\n          {globalData && uniswapHistory && length > 0 ? (\n            <BrowserRouter>\n              <NavHeaderUpdated />\n              <Switch>\n                <Route\n                  exact\n                  strict\n                  path=\"/token/:tokenAddressURL?\"\n                  render={({ match }) => {\n                    if (exchanges && tokenToExchangeMap.hasOwnProperty(match.params.tokenAddressURL.toLowerCase())) {\n                      return (\n                        <ExchangeWrapper\n                          currencyUnit={currencyUnit}\n                          address={tokenToExchangeMap[match.params.tokenAddressURL.toLowerCase()]}\n                          exchanges={exchanges}\n                          historyDaysToQuery={historyDaysToQuery}\n                          setHistoryDaysToQuery={setHistoryDaysToQuery}\n                        />\n                      )\n                    } else {\n                      return <Redirect to=\"/home\" />\n                    }\n                  }}\n                />\n                <Route path=\"/home\">\n                  <OverviewPage\n                    currencyUnit={currencyUnit}\n                    globalData={globalData}\n                    uniswapHistory={uniswapHistory}\n                    historyDaysToQuery={historyDaysToQuery}\n                    updateTimeframe={setHistoryDaysToQuery}\n                  />\n                </Route>\n                <Redirect to=\"/home\" />\n              </Switch>\n            </BrowserRouter>\n          ) : (\n            <LocalLoader fill=\"true\" />\n          )}\n        </div>\n      </Wrapper>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}