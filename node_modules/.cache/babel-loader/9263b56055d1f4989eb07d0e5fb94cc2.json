{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nvar useIntersection = function useIntersection(ref, options) {\n  var _a = useState(null),\n      intersectionObserverEntry = _a[0],\n      setIntersectionObserverEntry = _a[1];\n\n  useEffect(function () {\n    if (ref.current) {\n      var handler = function handler(entries) {\n        setIntersectionObserverEntry(entries[0]);\n      };\n\n      var observer_1 = new IntersectionObserver(handler, options);\n      observer_1.observe(ref.current);\n      return function () {\n        if (ref.current) {\n          observer_1.disconnect();\n        }\n      };\n    }\n\n    return function () {};\n  }, [ref, options.threshold, options.root, options.rootMargin]);\n  return intersectionObserverEntry;\n};\n\nexport default useIntersection;","map":{"version":3,"sources":["/workspace/uniswap-info/node_modules/react-use/esm/useIntersection.js"],"names":["useEffect","useState","useIntersection","ref","options","_a","intersectionObserverEntry","setIntersectionObserverEntry","current","handler","entries","observer_1","IntersectionObserver","observe","disconnect","threshold","root","rootMargin"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC1C,MAAIC,EAAE,GAAGJ,QAAQ,CAAC,IAAD,CAAjB;AAAA,MAAyBK,yBAAyB,GAAGD,EAAE,CAAC,CAAD,CAAvD;AAAA,MAA4DE,4BAA4B,GAAGF,EAAE,CAAC,CAAD,CAA7F;;AACAL,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIG,GAAG,CAACK,OAAR,EAAiB;AACb,UAAIC,OAAO,GAAG,SAAVA,OAAU,CAAUC,OAAV,EAAmB;AAC7BH,QAAAA,4BAA4B,CAACG,OAAO,CAAC,CAAD,CAAR,CAA5B;AACH,OAFD;;AAGA,UAAIC,UAAU,GAAG,IAAIC,oBAAJ,CAAyBH,OAAzB,EAAkCL,OAAlC,CAAjB;AACAO,MAAAA,UAAU,CAACE,OAAX,CAAmBV,GAAG,CAACK,OAAvB;AACA,aAAO,YAAY;AACf,YAAIL,GAAG,CAACK,OAAR,EAAiB;AACbG,UAAAA,UAAU,CAACG,UAAX;AACH;AACJ,OAJD;AAKH;;AACD,WAAO,YAAY,CAAG,CAAtB;AACH,GAdQ,EAcN,CAACX,GAAD,EAAMC,OAAO,CAACW,SAAd,EAAyBX,OAAO,CAACY,IAAjC,EAAuCZ,OAAO,CAACa,UAA/C,CAdM,CAAT;AAeA,SAAOX,yBAAP;AACH,CAlBD;;AAmBA,eAAeJ,eAAf","sourcesContent":["import { useEffect, useState } from 'react';\nvar useIntersection = function (ref, options) {\n    var _a = useState(null), intersectionObserverEntry = _a[0], setIntersectionObserverEntry = _a[1];\n    useEffect(function () {\n        if (ref.current) {\n            var handler = function (entries) {\n                setIntersectionObserverEntry(entries[0]);\n            };\n            var observer_1 = new IntersectionObserver(handler, options);\n            observer_1.observe(ref.current);\n            return function () {\n                if (ref.current) {\n                    observer_1.disconnect();\n                }\n            };\n        }\n        return function () { };\n    }, [ref, options.threshold, options.root, options.rootMargin]);\n    return intersectionObserverEntry;\n};\nexport default useIntersection;\n"]},"metadata":{},"sourceType":"module"}