{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport useUpdateEffect from './useUpdateEffect';\nexport default function useStateList(stateSet) {\n  if (stateSet === void 0) {\n    stateSet = [];\n  }\n\n  var _a = useState(0),\n      currentIndex = _a[0],\n      setCurrentIndex = _a[1]; // In case we receive a different state set, check if the current index still exists and\n  // reset it to the last if it don't.\n\n\n  useUpdateEffect(function () {\n    if (!stateSet[currentIndex]) {\n      setCurrentIndex(stateSet.length - 1);\n    }\n  }, [stateSet]);\n  var next = useCallback(function () {\n    var nextStateIndex = stateSet.length === currentIndex + 1 ? 0 : currentIndex + 1;\n    setCurrentIndex(nextStateIndex);\n  }, [stateSet, currentIndex]);\n  var prev = useCallback(function () {\n    var prevStateIndex = currentIndex === 0 ? stateSet.length - 1 : currentIndex - 1;\n    setCurrentIndex(prevStateIndex);\n  }, [stateSet, currentIndex]);\n  return {\n    state: stateSet[currentIndex],\n    next: next,\n    prev: prev\n  };\n}","map":{"version":3,"sources":["/workspace/uniswap-info/node_modules/react-use/esm/useStateList.js"],"names":["useState","useCallback","useUpdateEffect","useStateList","stateSet","_a","currentIndex","setCurrentIndex","length","next","nextStateIndex","prev","prevStateIndex","state"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,eAAe,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC3C,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,EAAX;AAAgB;;AAC3C,MAAIC,EAAE,GAAGL,QAAQ,CAAC,CAAD,CAAjB;AAAA,MAAsBM,YAAY,GAAGD,EAAE,CAAC,CAAD,CAAvC;AAAA,MAA4CE,eAAe,GAAGF,EAAE,CAAC,CAAD,CAAhE,CAF2C,CAG3C;AACA;;;AACAH,EAAAA,eAAe,CAAC,YAAY;AACxB,QAAI,CAACE,QAAQ,CAACE,YAAD,CAAb,EAA6B;AACzBC,MAAAA,eAAe,CAACH,QAAQ,CAACI,MAAT,GAAkB,CAAnB,CAAf;AACH;AACJ,GAJc,EAIZ,CAACJ,QAAD,CAJY,CAAf;AAKA,MAAIK,IAAI,GAAGR,WAAW,CAAC,YAAY;AAC/B,QAAIS,cAAc,GAAGN,QAAQ,CAACI,MAAT,KAAoBF,YAAY,GAAG,CAAnC,GAAuC,CAAvC,GAA2CA,YAAY,GAAG,CAA/E;AACAC,IAAAA,eAAe,CAACG,cAAD,CAAf;AACH,GAHqB,EAGnB,CAACN,QAAD,EAAWE,YAAX,CAHmB,CAAtB;AAIA,MAAIK,IAAI,GAAGV,WAAW,CAAC,YAAY;AAC/B,QAAIW,cAAc,GAAGN,YAAY,KAAK,CAAjB,GAAqBF,QAAQ,CAACI,MAAT,GAAkB,CAAvC,GAA2CF,YAAY,GAAG,CAA/E;AACAC,IAAAA,eAAe,CAACK,cAAD,CAAf;AACH,GAHqB,EAGnB,CAACR,QAAD,EAAWE,YAAX,CAHmB,CAAtB;AAIA,SAAO;AACHO,IAAAA,KAAK,EAAET,QAAQ,CAACE,YAAD,CADZ;AAEHG,IAAAA,IAAI,EAAEA,IAFH;AAGHE,IAAAA,IAAI,EAAEA;AAHH,GAAP;AAKH","sourcesContent":["import { useState, useCallback } from 'react';\nimport useUpdateEffect from './useUpdateEffect';\nexport default function useStateList(stateSet) {\n    if (stateSet === void 0) { stateSet = []; }\n    var _a = useState(0), currentIndex = _a[0], setCurrentIndex = _a[1];\n    // In case we receive a different state set, check if the current index still exists and\n    // reset it to the last if it don't.\n    useUpdateEffect(function () {\n        if (!stateSet[currentIndex]) {\n            setCurrentIndex(stateSet.length - 1);\n        }\n    }, [stateSet]);\n    var next = useCallback(function () {\n        var nextStateIndex = stateSet.length === currentIndex + 1 ? 0 : currentIndex + 1;\n        setCurrentIndex(nextStateIndex);\n    }, [stateSet, currentIndex]);\n    var prev = useCallback(function () {\n        var prevStateIndex = currentIndex === 0 ? stateSet.length - 1 : currentIndex - 1;\n        setCurrentIndex(prevStateIndex);\n    }, [stateSet, currentIndex]);\n    return {\n        state: stateSet[currentIndex],\n        next: next,\n        prev: prev,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}