{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-info/src/components/Chart/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Area, XAxis, YAxis, ResponsiveContainer, Bar, BarChart, CartesianGrid, Tooltip, AreaChart } from 'recharts';\nimport styled from 'styled-components';\nimport { useMedia } from 'react-use';\nimport { toK, toNiceDate, toNiceDateYear } from '../../helpers';\nconst ChartWrapper = styled.div`\n  padding-top: 1em;\n  margin-left: -1.5em;\n  @media (max-width: 40em) {\n    margin-left: -1em;\n  }\n`;\n\nconst Chart = ({\n  data,\n  chartOption,\n  currencyUnit,\n  symbol\n}) => {\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    setChartData([]);\n    setChartData(data);\n  }, [data, chartOption, currencyUnit]);\n  const isMobile = useMedia('(max-width: 40em)');\n\n  if (chartOption === 'price' && chartData && data) {\n    return React.createElement(ChartWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(ResponsiveContainer, {\n      aspect: isMobile ? 60 / 22 : 60 / 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(AreaChart, {\n      margin: {\n        top: 0,\n        right: 0,\n        bottom: 6,\n        left: 10\n      },\n      barCategoryGap: 1,\n      data: chartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      tickLine: false,\n      axisLine: false,\n      interval: \"preserveEnd\",\n      tickMargin: 14,\n      minTickGap: 80,\n      tickFormatter: tick => toNiceDate(tick),\n      dataKey: \"dayString\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      hide: isMobile,\n      type: \"number\",\n      tickMargin: 16,\n      orientation: \"left\",\n      tickFormatter: tick => toK(tick),\n      axisLine: false,\n      tickLine: false,\n      interval: \"preserveEnd\",\n      minTickGap: 80,\n      yAxisId: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      hide: true,\n      type: \"number\",\n      tickMargin: 16,\n      orientation: \"left\",\n      tickFormatter: tick => toK(tick),\n      axisLine: false,\n      tickLine: false,\n      interval: \"preserveEnd\",\n      minTickGap: 80,\n      yAxisId: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Area, {\n      strokeWidth: 2,\n      dot: false,\n      type: \"monotone\",\n      name: currencyUnit === 'ETH' ? 'Price (ETH/' + symbol + ')' : 'Price (USD/' + symbol + ')',\n      dataKey: currencyUnit === 'ETH' ? 'ethPerToken' : 'tokenPriceUSD',\n      yAxisId: 2,\n      fill: \"var(--c-token)\",\n      opacity: '0.4',\n      stroke: \"var(--c-token)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Area, {\n      strokeWidth: 2,\n      dot: false,\n      type: \"monotone\",\n      name: currencyUnit === 'USD' ? 'Inverse (' + symbol + '/USD)' : 'Inverse (' + symbol + '/ETH)',\n      dataKey: currencyUnit === 'USD' ? 'tokensPerUSD' : 'tokensPerEth',\n      yAxisId: 3,\n      fill: \"var(--c-token)\",\n      opacity: '0',\n      stroke: \"var(--c-token)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      cursor: true,\n      formatter: val => toK(val, true),\n      labelFormatter: label => toNiceDateYear(label),\n      labelStyle: {\n        paddingTop: 4\n      },\n      contentStyle: {\n        padding: '10px 14px',\n        borderRadius: 10,\n        borderColor: 'var(--c-zircon)'\n      },\n      wrapperStyle: {\n        top: -70,\n        left: -10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }))));\n  }\n\n  if (chartOption !== 'volume' && chartData && data) {\n    return React.createElement(ChartWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(ResponsiveContainer, {\n      aspect: isMobile ? 60 / 22 : 60 / 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(AreaChart, {\n      margin: {\n        top: 0,\n        right: 0,\n        bottom: 6,\n        left: 10\n      },\n      barCategoryGap: 1,\n      data: chartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      tickLine: false,\n      axisLine: false,\n      interval: \"preserveEnd\",\n      tickMargin: 14,\n      minTickGap: 80,\n      tickFormatter: tick => toNiceDate(tick),\n      dataKey: \"dayString\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      hide: isMobile,\n      type: \"number\",\n      tickMargin: 16,\n      orientation: \"left\",\n      tickFormatter: tick => toK(tick),\n      axisLine: false,\n      tickLine: false,\n      interval: \"preserveEnd\",\n      minTickGap: 80,\n      yAxisId: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      hide: true,\n      type: \"number\",\n      tickMargin: 16,\n      orientation: \"right\",\n      tickFormatter: tick => toK(tick),\n      axisLine: false,\n      tickLine: false,\n      interval: \"preserveEnd\",\n      minTickGap: 80,\n      yAxisId: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      cursor: true,\n      formatter: val => toK(val, true),\n      labelFormatter: label => toNiceDateYear(label),\n      labelStyle: {\n        paddingTop: 4\n      },\n      contentStyle: {\n        padding: '10px 14px',\n        borderRadius: 10,\n        borderColor: 'var(--c-zircon)'\n      },\n      wrapperStyle: {\n        top: -70,\n        left: -10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Area, {\n      strokeWidth: 2,\n      dot: false,\n      type: \"monotone\",\n      name: 'Total Liquidity' + (currencyUnit === 'USD' ? ' (USD)' : ' (ETH)'),\n      dataKey: currencyUnit === 'USD' ? 'usdLiquidity' : 'ethLiquidity',\n      yAxisId: 0,\n      fill: \"var(--c-token)\",\n      opacity: '0.4',\n      stroke: \"var(--c-token)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Area, {\n      type: \"monotone\",\n      name: 'Eth Balance',\n      dataKey: 'ethBalance',\n      fill: \"var(--c-token)\",\n      opacity: '0',\n      stroke: \"var(--c-token)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Area, {\n      type: \"monotone\",\n      name: 'Token Balance',\n      dataKey: 'tokenBalance',\n      fill: \"var(--c-token)\",\n      yAxisId: 1,\n      opacity: '0',\n      stroke: \"var(--c-token)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))));\n  } else {\n    // volume\n    return React.createElement(ChartWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(ResponsiveContainer, {\n      aspect: isMobile ? 60 / 22 : 60 / 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(BarChart, {\n      margin: {\n        top: 0,\n        right: 0,\n        bottom: 6,\n        left: 10\n      },\n      barCategoryGap: 1,\n      data: chartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      tickLine: false,\n      axisLine: false,\n      interval: \"preserveEnd\",\n      minTickGap: 80,\n      tickMargin: 14,\n      tickFormatter: tick => toNiceDate(tick),\n      dataKey: \"dayString\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      hide: isMobile,\n      type: \"number\",\n      axisLine: false,\n      tickMargin: 16,\n      tickFormatter: tick => toK(tick),\n      tickLine: false,\n      interval: \"preserveEnd\",\n      minTickGap: 80,\n      yAxisId: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      cursor: true,\n      formatter: val => toK(val, true),\n      labelFormatter: label => toNiceDateYear(label),\n      labelStyle: {\n        paddingTop: 4\n      },\n      contentStyle: {\n        padding: '10px 14px',\n        borderRadius: 10,\n        borderColor: 'var(--c-zircon)'\n      },\n      wrapperStyle: {\n        top: -70,\n        left: -10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(Bar, {\n      type: \"monotone\",\n      name: 'Volume' + (currencyUnit === 'USD' ? ' (USD)' : ' (ETH)'),\n      dataKey: currencyUnit === 'USD' ? 'usdVolume' : 'ethVolume',\n      fill: \"var(--c-token)\",\n      opacity: '0.4',\n      yAxisId: 0,\n      stroke: \"var(--c-token)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }))));\n  }\n};\n\nexport default Chart;","map":{"version":3,"sources":["/workspace/uniswap-info/src/components/Chart/index.js"],"names":["React","useState","useEffect","Area","XAxis","YAxis","ResponsiveContainer","Bar","BarChart","CartesianGrid","Tooltip","AreaChart","styled","useMedia","toK","toNiceDate","toNiceDateYear","ChartWrapper","div","Chart","data","chartOption","currencyUnit","symbol","chartData","setChartData","isMobile","top","right","bottom","left","tick","val","label","paddingTop","padding","borderRadius","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Area, XAxis, YAxis, ResponsiveContainer, Bar, BarChart, CartesianGrid, Tooltip, AreaChart } from 'recharts'\nimport styled from 'styled-components'\nimport { useMedia } from 'react-use'\nimport { toK, toNiceDate, toNiceDateYear } from '../../helpers'\n\nconst ChartWrapper = styled.div`\n  padding-top: 1em;\n  margin-left: -1.5em;\n  @media (max-width: 40em) {\n    margin-left: -1em;\n  }\n`\n\nconst Chart = ({ data, chartOption, currencyUnit, symbol }) => {\n  const [chartData, setChartData] = useState([])\n  useEffect(() => {\n    setChartData([])\n    setChartData(data)\n  }, [data, chartOption, currencyUnit])\n\n  const isMobile = useMedia('(max-width: 40em)')\n  if (chartOption === 'price' && chartData && data) {\n    return (\n      <ChartWrapper>\n        <ResponsiveContainer aspect={isMobile ? 60 / 22 : 60 / 12}>\n          <AreaChart margin={{ top: 0, right: 0, bottom: 6, left: 10 }} barCategoryGap={1} data={chartData}>\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <XAxis\n              tickLine={false}\n              axisLine={false}\n              interval=\"preserveEnd\"\n              tickMargin={14}\n              minTickGap={80}\n              tickFormatter={tick => toNiceDate(tick)}\n              dataKey=\"dayString\"\n            />\n            <YAxis\n              hide={isMobile}\n              type=\"number\"\n              tickMargin={16}\n              orientation=\"left\"\n              tickFormatter={tick => toK(tick)}\n              axisLine={false}\n              tickLine={false}\n              interval=\"preserveEnd\"\n              minTickGap={80}\n              yAxisId={2}\n            />\n            <YAxis\n              hide={true}\n              type=\"number\"\n              tickMargin={16}\n              orientation=\"left\"\n              tickFormatter={tick => toK(tick)}\n              axisLine={false}\n              tickLine={false}\n              interval=\"preserveEnd\"\n              minTickGap={80}\n              yAxisId={3}\n            />\n            <Area\n              strokeWidth={2}\n              dot={false}\n              type=\"monotone\"\n              name={currencyUnit === 'ETH' ? 'Price (ETH/' + symbol + ')' : 'Price (USD/' + symbol + ')'}\n              dataKey={currencyUnit === 'ETH' ? 'ethPerToken' : 'tokenPriceUSD'}\n              yAxisId={2}\n              fill=\"var(--c-token)\"\n              opacity={'0.4'}\n              stroke=\"var(--c-token)\"\n            />\n            <Area\n              strokeWidth={2}\n              dot={false}\n              type=\"monotone\"\n              name={currencyUnit === 'USD' ? 'Inverse (' + symbol + '/USD)' : 'Inverse (' + symbol + '/ETH)'}\n              dataKey={currencyUnit === 'USD' ? 'tokensPerUSD' : 'tokensPerEth'}\n              yAxisId={3}\n              fill=\"var(--c-token)\"\n              opacity={'0'}\n              stroke=\"var(--c-token)\"\n            />\n            <Tooltip\n              cursor={true}\n              formatter={val => toK(val, true)}\n              labelFormatter={label => toNiceDateYear(label)}\n              labelStyle={{ paddingTop: 4 }}\n              contentStyle={{\n                padding: '10px 14px',\n                borderRadius: 10,\n                borderColor: 'var(--c-zircon)'\n              }}\n              wrapperStyle={{ top: -70, left: -10 }}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </ChartWrapper>\n    )\n  }\n  if (chartOption !== 'volume' && chartData && data) {\n    return (\n      <ChartWrapper>\n        <ResponsiveContainer aspect={isMobile ? 60 / 22 : 60 / 12}>\n          <AreaChart margin={{ top: 0, right: 0, bottom: 6, left: 10 }} barCategoryGap={1} data={chartData}>\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <XAxis\n              tickLine={false}\n              axisLine={false}\n              interval=\"preserveEnd\"\n              tickMargin={14}\n              minTickGap={80}\n              tickFormatter={tick => toNiceDate(tick)}\n              dataKey=\"dayString\"\n            />\n            <YAxis\n              hide={isMobile}\n              type=\"number\"\n              tickMargin={16}\n              orientation=\"left\"\n              tickFormatter={tick => toK(tick)}\n              axisLine={false}\n              tickLine={false}\n              interval=\"preserveEnd\"\n              minTickGap={80}\n              yAxisId={0}\n            />\n            <YAxis\n              hide={true}\n              type=\"number\"\n              tickMargin={16}\n              orientation=\"right\"\n              tickFormatter={tick => toK(tick)}\n              axisLine={false}\n              tickLine={false}\n              interval=\"preserveEnd\"\n              minTickGap={80}\n              yAxisId={1}\n            />\n            <Tooltip\n              cursor={true}\n              formatter={val => toK(val, true)}\n              labelFormatter={label => toNiceDateYear(label)}\n              labelStyle={{ paddingTop: 4 }}\n              contentStyle={{\n                padding: '10px 14px',\n                borderRadius: 10,\n                borderColor: 'var(--c-zircon)'\n              }}\n              wrapperStyle={{ top: -70, left: -10 }}\n            />\n            <Area\n              strokeWidth={2}\n              dot={false}\n              type=\"monotone\"\n              name={'Total Liquidity' + (currencyUnit === 'USD' ? ' (USD)' : ' (ETH)')}\n              dataKey={currencyUnit === 'USD' ? 'usdLiquidity' : 'ethLiquidity'}\n              yAxisId={0}\n              fill=\"var(--c-token)\"\n              opacity={'0.4'}\n              stroke=\"var(--c-token)\"\n            />\n            <Area\n              type=\"monotone\"\n              name={'Eth Balance'}\n              dataKey={'ethBalance'}\n              fill=\"var(--c-token)\"\n              opacity={'0'}\n              stroke=\"var(--c-token)\"\n            />\n            <Area\n              type=\"monotone\"\n              name={'Token Balance'}\n              dataKey={'tokenBalance'}\n              fill=\"var(--c-token)\"\n              yAxisId={1}\n              opacity={'0'}\n              stroke=\"var(--c-token)\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </ChartWrapper>\n    )\n  } else {\n    // volume\n    return (\n      <ChartWrapper>\n        <ResponsiveContainer aspect={isMobile ? 60 / 22 : 60 / 12}>\n          <BarChart margin={{ top: 0, right: 0, bottom: 6, left: 10 }} barCategoryGap={1} data={chartData}>\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <XAxis\n              tickLine={false}\n              axisLine={false}\n              interval=\"preserveEnd\"\n              minTickGap={80}\n              tickMargin={14}\n              tickFormatter={tick => toNiceDate(tick)}\n              dataKey=\"dayString\"\n            />\n            <YAxis\n              hide={isMobile}\n              type=\"number\"\n              axisLine={false}\n              tickMargin={16}\n              tickFormatter={tick => toK(tick)}\n              tickLine={false}\n              interval=\"preserveEnd\"\n              minTickGap={80}\n              yAxisId={0}\n            />\n            <Tooltip\n              cursor={true}\n              formatter={val => toK(val, true)}\n              labelFormatter={label => toNiceDateYear(label)}\n              labelStyle={{ paddingTop: 4 }}\n              contentStyle={{\n                padding: '10px 14px',\n                borderRadius: 10,\n                borderColor: 'var(--c-zircon)'\n              }}\n              wrapperStyle={{ top: -70, left: -10 }}\n            />\n            <Bar\n              type=\"monotone\"\n              name={'Volume' + (currencyUnit === 'USD' ? ' (USD)' : ' (ETH)')}\n              dataKey={currencyUnit === 'USD' ? 'usdVolume' : 'ethVolume'}\n              fill=\"var(--c-token)\"\n              opacity={'0.4'}\n              yAxisId={0}\n              stroke=\"var(--c-token)\"\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </ChartWrapper>\n    )\n  }\n}\n\nexport default Chart\n"]},"metadata":{},"sourceType":"module"}