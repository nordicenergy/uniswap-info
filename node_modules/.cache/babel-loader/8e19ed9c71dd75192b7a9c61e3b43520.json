{"ast":null,"code":"import { BigNumber } from 'bignumber.js';\nimport dayjs from 'dayjs';\nimport { client } from '../apollo/client';\nimport { ExportToCsv } from 'export-to-csv';\nimport { ethers } from 'ethers';\nimport utc from 'dayjs/plugin/utc';\nimport { TRANSACTIONS_QUERY_SKIPPABLE } from '../apollo/queries';\nBigNumber.set({\n  EXPONENTIAL_AT: 50\n});\ndayjs.extend(utc);\nexport const toNiceDate = date => {\n  // let df = new Date(date * 1000).toUTCString('MMMM DD')\n  let x = dayjs.utc(dayjs.unix(date)).format('MMM DD');\n  return x;\n};\nexport const toNiceDateYear = date => dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY');\nexport const isAddress = value => {\n  try {\n    return ethers.utils.getAddress(value.toLowerCase());\n  } catch {\n    return false;\n  }\n};\nexport const isWeb3Available = async () => {\n  /* eslint-disable */\n  if (typeof window.ethereum !== 'undefined') {\n    window.web3 = new Web3(ethereum);\n\n    try {\n      await ethereum.enable();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  } else if (typeof window.web3 !== 'undefined') {\n    window.web3 = new Web3(web3.currentProvider);\n    return true;\n  } else {\n    return false;\n  }\n  /* eslint-enable */\n\n};\nexport const toK = (num, fixed) => {\n  const formatter = divideBy => fixed === true ? Number(num / divideBy).toFixed(4) : Number(num / divideBy);\n\n  if (num > 999999 || num < -999999) {\n    return \"\".concat(formatter(1000000), \"M\");\n  } else if (num > 999 || num < -999) {\n    return \"\".concat(formatter(1000), \"K\");\n  } else {\n    return formatter(1);\n  }\n};\nexport const setThemeColor = theme => document.documentElement.style.setProperty('--c-token', theme || '#333333');\nexport const Big = number => new BigNumber(number);\nexport const urls = {\n  showTransaction: tx => \"https://etherscan.io/tx/\".concat(tx, \"/\"),\n  showAddress: address => \"https://www.etherscan.io/address/\".concat(address, \"/\"),\n  showToken: address => \"https://www.etherscan.io/token/\".concat(address, \"/\"),\n  showBlock: block => \"https://etherscan.io/block/\".concat(block, \"/\")\n};\nexport const formatTime = unix => {\n  const now = dayjs();\n  const timestamp = dayjs.unix(unix);\n  const inSeconds = now.diff(timestamp, 'second');\n  const inMinutes = now.diff(timestamp, 'minute');\n  const inHours = now.diff(timestamp, 'hour');\n  const inDays = now.diff(timestamp, 'day');\n\n  if (inHours >= 24) {\n    return \"\".concat(inDays, \" \").concat(inDays === 1 ? 'day' : 'days', \" ago\");\n  } else if (inMinutes >= 60) {\n    return \"\".concat(inHours, \" \").concat(inHours === 1 ? 'hour' : 'hours', \" ago\");\n  } else if (inSeconds >= 60) {\n    return \"\".concat(inMinutes, \" \").concat(inMinutes === 1 ? 'minute' : 'minutes', \" ago\");\n  } else {\n    return \"\".concat(inSeconds, \" \").concat(inSeconds === 1 ? 'second' : 'seconds', \" ago\");\n  }\n};\nexport const formatNumber = num => {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n};\nexport const getAllTransactions = async address => {\n  // current time\n  const utcEndTime = dayjs.utc();\n  let utcStartTime;\n  utcStartTime = utcEndTime.subtract(1, 'year').startOf('day');\n  let startTime = utcStartTime.unix() - 1; // -1 because we filter on greater than in the query\n\n  let data = [];\n  let skipCount = 0;\n  let fetchingData = true;\n\n  while (fetchingData) {\n    let result = await client.query({\n      query: TRANSACTIONS_QUERY_SKIPPABLE,\n      variables: {\n        exchangeAddr: address,\n        skip: skipCount\n      },\n      fetchPolicy: 'network-only'\n    });\n\n    if (result) {\n      skipCount = skipCount + 100;\n\n      if (result.data.transactions.length === 0) {\n        fetchingData = false;\n      } else if (result.data.transactions[result.data.transactions.length - 1].timestamp < startTime) {\n        fetchingData = false;\n      }\n\n      data = data.concat(result.data.transactions);\n    }\n  }\n\n  const options = {\n    fieldSeparator: ',',\n    quoteStrings: '\"',\n    decimalSeparator: '.',\n    showLabels: true,\n    showTitle: true,\n    title: 'My Awesome CSV',\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n\n  };\n  let csvdata = [];\n  Object.keys(data).map(index => {\n    return csvdata.push(data[index]);\n  });\n  const csvExporter = new ExportToCsv(options);\n  csvExporter.generateCsv(data);\n}; // using a currency library here in case we want to add more in future\n\nvar priceFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nexport const formattedNum = (number, usd = false) => {\n  if (isNaN(number) || number === '') {\n    return '';\n  }\n\n  let num = parseFloat(number);\n\n  if (num === 0) {\n    return 0;\n  }\n\n  if (num < 0.0001) {\n    return '< 0.0001';\n  }\n\n  if (num > 1000) {\n    return Number(parseFloat(num).toFixed(0)).toLocaleString();\n  }\n\n  if (usd) {\n    if (num < 0.01) {\n      return Number(parseFloat(num).toFixed(4));\n    }\n\n    let usdString = priceFormatter.format(num);\n    return usdString.slice(1, usdString.length);\n  }\n\n  return Number(parseFloat(num).toFixed(4));\n};\nexport const get2DayPercentFormatted = (valueNow, value24HoursAgo, value48HoursAgo) => {\n  // get volume info for both 24 hour periods\n  let firstDayValue = value24HoursAgo - value48HoursAgo;\n  let secondDayValue = valueNow - value24HoursAgo;\n  let amountChange = secondDayValue - firstDayValue;\n  let percentChange = '';\n  const adjustedPercentChange = (amountChange / firstDayValue * 100).toFixed(2);\n  adjustedPercentChange > 0 ? percentChange = '+' : percentChange = '';\n  percentChange += adjustedPercentChange;\n\n  if (isNaN(percentChange) || !isFinite(percentChange)) {\n    return [secondDayValue, 0];\n  }\n\n  return [secondDayValue, percentChange];\n};\nexport const getPercentFormatted = (valueNow, value24HoursAgo) => {\n  let percentChange = '';\n  const adjustedPercentChange = ((valueNow - value24HoursAgo) / value24HoursAgo * 100).toFixed(2);\n  adjustedPercentChange > 0 ? percentChange = '+' : percentChange = '';\n  percentChange += adjustedPercentChange;\n\n  if (isNaN(percentChange)) {\n    return 0;\n  }\n\n  return percentChange;\n};","map":{"version":3,"sources":["/workspace/uniswap-info/src/helpers/index.js"],"names":["BigNumber","dayjs","client","ExportToCsv","ethers","utc","TRANSACTIONS_QUERY_SKIPPABLE","set","EXPONENTIAL_AT","extend","toNiceDate","date","x","unix","format","toNiceDateYear","isAddress","value","utils","getAddress","toLowerCase","isWeb3Available","window","ethereum","web3","Web3","enable","error","currentProvider","toK","num","fixed","formatter","divideBy","Number","toFixed","setThemeColor","theme","document","documentElement","style","setProperty","Big","number","urls","showTransaction","tx","showAddress","address","showToken","showBlock","block","formatTime","now","timestamp","inSeconds","diff","inMinutes","inHours","inDays","formatNumber","toString","replace","getAllTransactions","utcEndTime","utcStartTime","subtract","startOf","startTime","data","skipCount","fetchingData","result","query","variables","exchangeAddr","skip","fetchPolicy","transactions","length","concat","options","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","csvdata","Object","keys","map","index","push","csvExporter","generateCsv","priceFormatter","Intl","NumberFormat","currency","formattedNum","usd","isNaN","parseFloat","toLocaleString","usdString","slice","get2DayPercentFormatted","valueNow","value24HoursAgo","value48HoursAgo","firstDayValue","secondDayValue","amountChange","percentChange","adjustedPercentChange","isFinite","getPercentFormatted"],"mappings":"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","sourcesContent":["import { BigNumber } from 'bignumber.js'\nimport dayjs from 'dayjs'\nimport { client } from '../apollo/client'\nimport { ExportToCsv } from 'export-to-csv'\nimport { ethers } from 'ethers'\nimport utc from 'dayjs/plugin/utc'\n\nimport { TRANSACTIONS_QUERY_SKIPPABLE } from '../apollo/queries'\n\nBigNumber.set({ EXPONENTIAL_AT: 50 })\n\ndayjs.extend(utc)\n\nexport const toNiceDate = date => {\n  // let df = new Date(date * 1000).toUTCString('MMMM DD')\n  let x = dayjs.utc(dayjs.unix(date)).format('MMM DD')\n  return x\n}\n\nexport const toNiceDateYear = date => dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY')\n\nexport const isAddress = value => {\n  try {\n    return ethers.utils.getAddress(value.toLowerCase())\n  } catch {\n    return false\n  }\n}\n\nexport const isWeb3Available = async () => {\n  /* eslint-disable */\n  if (typeof window.ethereum !== 'undefined') {\n    window.web3 = new Web3(ethereum)\n    try {\n      await ethereum.enable()\n      return true\n    } catch (error) {\n      return false\n    }\n  } else if (typeof window.web3 !== 'undefined') {\n    window.web3 = new Web3(web3.currentProvider)\n    return true\n  } else {\n    return false\n  }\n  /* eslint-enable */\n}\n\nexport const toK = (num, fixed) => {\n  const formatter = divideBy => (fixed === true ? Number(num / divideBy).toFixed(4) : Number(num / divideBy))\n\n  if (num > 999999 || num < -999999) {\n    return `${formatter(1000000)}M`\n  } else if (num > 999 || num < -999) {\n    return `${formatter(1000)}K`\n  } else {\n    return formatter(1)\n  }\n}\n\nexport const setThemeColor = theme => document.documentElement.style.setProperty('--c-token', theme || '#333333')\n\nexport const Big = number => new BigNumber(number)\n\nexport const urls = {\n  showTransaction: tx => `https://etherscan.io/tx/${tx}/`,\n  showAddress: address => `https://www.etherscan.io/address/${address}/`,\n  showToken: address => `https://www.etherscan.io/token/${address}/`,\n  showBlock: block => `https://etherscan.io/block/${block}/`\n}\n\nexport const formatTime = unix => {\n  const now = dayjs()\n  const timestamp = dayjs.unix(unix)\n\n  const inSeconds = now.diff(timestamp, 'second')\n  const inMinutes = now.diff(timestamp, 'minute')\n  const inHours = now.diff(timestamp, 'hour')\n  const inDays = now.diff(timestamp, 'day')\n\n  if (inHours >= 24) {\n    return `${inDays} ${inDays === 1 ? 'day' : 'days'} ago`\n  } else if (inMinutes >= 60) {\n    return `${inHours} ${inHours === 1 ? 'hour' : 'hours'} ago`\n  } else if (inSeconds >= 60) {\n    return `${inMinutes} ${inMinutes === 1 ? 'minute' : 'minutes'} ago`\n  } else {\n    return `${inSeconds} ${inSeconds === 1 ? 'second' : 'seconds'} ago`\n  }\n}\n\nexport const formatNumber = num => {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n}\n\nexport const getAllTransactions = async address => {\n  // current time\n  const utcEndTime = dayjs.utc()\n  let utcStartTime\n  utcStartTime = utcEndTime.subtract(1, 'year').startOf('day')\n  let startTime = utcStartTime.unix() - 1 // -1 because we filter on greater than in the query\n  let data = []\n  let skipCount = 0\n  let fetchingData = true\n\n  while (fetchingData) {\n    let result = await client.query({\n      query: TRANSACTIONS_QUERY_SKIPPABLE,\n      variables: {\n        exchangeAddr: address,\n        skip: skipCount\n      },\n      fetchPolicy: 'network-only'\n    })\n    if (result) {\n      skipCount = skipCount + 100\n      if (result.data.transactions.length === 0) {\n        fetchingData = false\n      } else if (result.data.transactions[result.data.transactions.length - 1].timestamp < startTime) {\n        fetchingData = false\n      }\n      data = data.concat(result.data.transactions)\n    }\n  }\n\n  const options = {\n    fieldSeparator: ',',\n    quoteStrings: '\"',\n    decimalSeparator: '.',\n    showLabels: true,\n    showTitle: true,\n    title: 'My Awesome CSV',\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true\n    // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n  }\n  let csvdata = []\n  Object.keys(data).map(index => {\n    return csvdata.push(data[index])\n  })\n  const csvExporter = new ExportToCsv(options)\n  csvExporter.generateCsv(data)\n}\n\n// using a currency library here in case we want to add more in future\nvar priceFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n})\n\nexport const formattedNum = (number, usd = false) => {\n  if (isNaN(number) || number === '') {\n    return ''\n  }\n  let num = parseFloat(number)\n  if (num === 0) {\n    return 0\n  }\n  if (num < 0.0001) {\n    return '< 0.0001'\n  }\n\n  if (num > 1000) {\n    return Number(parseFloat(num).toFixed(0)).toLocaleString()\n  }\n\n  if (usd) {\n    if (num < 0.01) {\n      return Number(parseFloat(num).toFixed(4))\n    }\n    let usdString = priceFormatter.format(num)\n    return usdString.slice(1, usdString.length)\n  }\n  return Number(parseFloat(num).toFixed(4))\n}\n\nexport const get2DayPercentFormatted = (valueNow, value24HoursAgo, value48HoursAgo) => {\n  // get volume info for both 24 hour periods\n  let firstDayValue = value24HoursAgo - value48HoursAgo\n  let secondDayValue = valueNow - value24HoursAgo\n  let amountChange = secondDayValue - firstDayValue\n\n  let percentChange = ''\n  const adjustedPercentChange = ((amountChange / firstDayValue) * 100).toFixed(2)\n  adjustedPercentChange > 0 ? (percentChange = '+') : (percentChange = '')\n  percentChange += adjustedPercentChange\n\n  if (isNaN(percentChange) || !isFinite(percentChange)) {\n    return [secondDayValue, 0]\n  }\n\n  return [secondDayValue, percentChange]\n}\n\nexport const getPercentFormatted = (valueNow, value24HoursAgo) => {\n  let percentChange = ''\n  const adjustedPercentChange = (((valueNow - value24HoursAgo) / value24HoursAgo) * 100).toFixed(2)\n  adjustedPercentChange > 0 ? (percentChange = '+') : (percentChange = '')\n  percentChange += adjustedPercentChange\n\n  if (isNaN(percentChange)) {\n    return 0\n  }\n\n  return percentChange\n}\n"]},"metadata":{},"sourceType":"module"}