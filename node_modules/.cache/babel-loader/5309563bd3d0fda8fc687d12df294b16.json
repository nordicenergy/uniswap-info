{"ast":null,"code":"import { useState, useMemo } from 'react';\n\nvar useList = function (initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n\n  var _a = useState(initialList),\n      list = _a[0],\n      set = _a[1];\n\n  var utils = useMemo(function () {\n    return {\n      set: set,\n      clear: function () {\n        return set([]);\n      },\n      updateAt: function (index, entry) {\n        return set(function (currentList) {\n          return currentList.slice(0, index).concat([entry], currentList.slice(index + 1));\n        });\n      },\n      remove: function (index) {\n        return set(function (currentList) {\n          return currentList.slice(0, index).concat(currentList.slice(index + 1));\n        });\n      },\n      push: function () {\n        var entry = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          entry[_i] = arguments[_i];\n        }\n\n        return set(function (currentList) {\n          return currentList.concat(entry);\n        });\n      },\n      filter: function (fn) {\n        return set(function (currentList) {\n          return currentList.filter(fn);\n        });\n      },\n      sort: function (fn) {\n        return set(function (currentList) {\n          return currentList.slice().sort(fn);\n        });\n      },\n      reset: function () {\n        return set(initialList.slice());\n      }\n    };\n  }, [set]);\n  return [list, utils];\n};\n\nexport default useList;","map":{"version":3,"sources":["/workspace/uniswap-info/node_modules/react-use/esm/useList.js"],"names":["useState","useMemo","useList","initialList","_a","list","set","utils","clear","updateAt","index","entry","currentList","slice","concat","remove","push","_i","arguments","length","filter","fn","sort","reset"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;;AACA,IAAIC,OAAO,GAAG,UAAUC,WAAV,EAAuB;AACjC,MAAIA,WAAW,KAAK,KAAK,CAAzB,EAA4B;AAAEA,IAAAA,WAAW,GAAG,EAAd;AAAmB;;AACjD,MAAIC,EAAE,GAAGJ,QAAQ,CAACG,WAAD,CAAjB;AAAA,MAAgCE,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAzC;AAAA,MAA8CE,GAAG,GAAGF,EAAE,CAAC,CAAD,CAAtD;;AACA,MAAIG,KAAK,GAAGN,OAAO,CAAC,YAAY;AAAE,WAAQ;AACtCK,MAAAA,GAAG,EAAEA,GADiC;AAEtCE,MAAAA,KAAK,EAAE,YAAY;AAAE,eAAOF,GAAG,CAAC,EAAD,CAAV;AAAiB,OAFA;AAGtCG,MAAAA,QAAQ,EAAE,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC9B,eAAOL,GAAG,CAAC,UAAUM,WAAV,EAAuB;AAAE,iBAAOA,WAAW,CAACC,KAAZ,CAAkB,CAAlB,EAAqBH,KAArB,EAA4BI,MAA5B,CAAmC,CAACH,KAAD,CAAnC,EAA4CC,WAAW,CAACC,KAAZ,CAAkBH,KAAK,GAAG,CAA1B,CAA5C,CAAP;AAAmF,SAA7G,CAAV;AACH,OALqC;AAMtCK,MAAAA,MAAM,EAAE,UAAUL,KAAV,EAAiB;AAAE,eAAOJ,GAAG,CAAC,UAAUM,WAAV,EAAuB;AAAE,iBAAOA,WAAW,CAACC,KAAZ,CAAkB,CAAlB,EAAqBH,KAArB,EAA4BI,MAA5B,CAAmCF,WAAW,CAACC,KAAZ,CAAkBH,KAAK,GAAG,CAA1B,CAAnC,CAAP;AAA0E,SAApG,CAAV;AAAkH,OANvG;AAOtCM,MAAAA,IAAI,EAAE,YAAY;AACd,YAAIL,KAAK,GAAG,EAAZ;;AACA,aAAK,IAAIM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CN,UAAAA,KAAK,CAACM,EAAD,CAAL,GAAYC,SAAS,CAACD,EAAD,CAArB;AACH;;AACD,eAAOX,GAAG,CAAC,UAAUM,WAAV,EAAuB;AAAE,iBAAOA,WAAW,CAACE,MAAZ,CAAmBH,KAAnB,CAAP;AAAmC,SAA7D,CAAV;AACH,OAbqC;AActCS,MAAAA,MAAM,EAAE,UAAUC,EAAV,EAAc;AAAE,eAAOf,GAAG,CAAC,UAAUM,WAAV,EAAuB;AAAE,iBAAOA,WAAW,CAACQ,MAAZ,CAAmBC,EAAnB,CAAP;AAAgC,SAA1D,CAAV;AAAwE,OAd1D;AAetCC,MAAAA,IAAI,EAAE,UAAUD,EAAV,EAAc;AAAE,eAAOf,GAAG,CAAC,UAAUM,WAAV,EAAuB;AAAE,iBAAOA,WAAW,CAACC,KAAZ,GAAoBS,IAApB,CAAyBD,EAAzB,CAAP;AAAsC,SAAhE,CAAV;AAA8E,OAf9D;AAgBtCE,MAAAA,KAAK,EAAE,YAAY;AAAE,eAAOjB,GAAG,CAACH,WAAW,CAACU,KAAZ,EAAD,CAAV;AAAkC;AAhBjB,KAAR;AAiB7B,GAjBc,EAiBZ,CAACP,GAAD,CAjBY,CAAnB;AAkBA,SAAO,CAACD,IAAD,EAAOE,KAAP,CAAP;AACH,CAtBD;;AAuBA,eAAeL,OAAf","sourcesContent":["import { useState, useMemo } from 'react';\nvar useList = function (initialList) {\n    if (initialList === void 0) { initialList = []; }\n    var _a = useState(initialList), list = _a[0], set = _a[1];\n    var utils = useMemo(function () { return ({\n        set: set,\n        clear: function () { return set([]); },\n        updateAt: function (index, entry) {\n            return set(function (currentList) { return currentList.slice(0, index).concat([entry], currentList.slice(index + 1)); });\n        },\n        remove: function (index) { return set(function (currentList) { return currentList.slice(0, index).concat(currentList.slice(index + 1)); }); },\n        push: function () {\n            var entry = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                entry[_i] = arguments[_i];\n            }\n            return set(function (currentList) { return currentList.concat(entry); });\n        },\n        filter: function (fn) { return set(function (currentList) { return currentList.filter(fn); }); },\n        sort: function (fn) { return set(function (currentList) { return currentList.slice().sort(fn); }); },\n        reset: function () { return set(initialList.slice()); },\n    }); }, [set]);\n    return [list, utils];\n};\nexport default useList;\n"]},"metadata":{},"sourceType":"module"}