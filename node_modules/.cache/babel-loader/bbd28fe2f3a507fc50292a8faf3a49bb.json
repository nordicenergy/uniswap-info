{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-info/src/pages/ExchangeWrapper.js\";\nimport React, { useEffect, useState } from 'react';\nimport { ExchangePage } from '../components/ExchangePage';\nimport LocalLoader from '../components/LocalLoader';\nimport { useExchangeSpecificData } from '../Data/ExchangeSpecificData';\nimport { useChart } from '../Data/ChartData';\nimport { setThemeColor, isAddress } from '../helpers';\nimport { darken } from 'polished';\nimport Vibrant from 'node-vibrant';\nimport { hex } from 'wcag-contrast';\nexport const ExchangeWrapper = function ({\n  address,\n  exchanges,\n  currencyUnit,\n  historyDaysToQuery,\n  setHistoryDaysToQuery\n}) {\n  const exchangeData = useExchangeSpecificData(address);\n  const chartData = useChart(address, historyDaysToQuery);\n  const [tokenName, setTokenName] = useState('');\n  const [tokenSymbol, setTokenSymbol] = useState('');\n  const [logo, setLogo] = useState('');\n  const [currentData, setCurrentData] = useState({});\n  useEffect(() => {\n    let updateData = {};\n    updateData.price = exchangeData.price;\n    updateData.invPrice = exchangeData.invPrice;\n    updateData.priceUSD = exchangeData.priceUSD;\n    updateData.tokenAddress = exchangeData.tokenAddres;\n    updateData.pricePercentChange = exchangeData.pricePercentChange;\n    updateData.pricePercentChangeETH = exchangeData.pricePercentChangeETH;\n    updateData.volumePercentChange = exchangeData.volumePercentChangeETH;\n    updateData.volumePercentChangeUSD = exchangeData.volumePercentChangeUSD;\n    updateData.liquidityPercentChange = exchangeData.liquidityPercentChangeETH;\n    updateData.liquidityPercentChangeUSD = exchangeData.liquidityPercentChangeUSD;\n    updateData.txsPercentChange = exchangeData.txsPercentChange;\n    updateData.ethLiquidity = exchangeData.ethLiquidity;\n    updateData.tradeVolume = exchangeData.tradeVolume;\n    updateData.tradeVolumeUSD = exchangeData.tradeVolumeUSD;\n    updateData.oneDayTxs = exchangeData.oneDayTxs;\n    setCurrentData(updateData);\n  }, [exchangeData]);\n  useEffect(() => {\n    setCurrentData({}); // reset data for UI\n\n    if (exchanges.hasOwnProperty(address)) {\n      let tokenAddress = exchanges[address].tokenAddress;\n      const path = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${isAddress(tokenAddress)}/logo.png`;\n      Vibrant.from(path).getPalette((err, palette) => {\n        if (palette && palette.Vibrant) {\n          let detectedHex = palette.Vibrant.hex;\n          let AAscore = hex(detectedHex, '#FFF');\n\n          while (AAscore < 3) {\n            detectedHex = darken(0.01, detectedHex);\n            AAscore = hex(detectedHex, '#FFF');\n          }\n\n          setThemeColor(detectedHex);\n        }\n      });\n    } else {\n      setThemeColor('#333333');\n    }\n  }, [address, exchanges]);\n  useEffect(() => {\n    if (exchanges.hasOwnProperty(address)) {\n      setTokenName(exchanges[address].tokenName);\n      setTokenSymbol(exchanges[address].tokenSymbol);\n      setLogo(exchanges[address].logoStyled);\n    }\n  }, [exchanges, address]);\n  return exchangeData ? React.createElement(ExchangePage, {\n    currencyUnit: currencyUnit,\n    exchangeAddress: address,\n    chartData: chartData,\n    logo: logo,\n    historyDaysToQuery: historyDaysToQuery,\n    setHistoryDaysToQuery: setHistoryDaysToQuery,\n    tokenName: tokenName,\n    symbol: tokenSymbol,\n    tokenAddress: exchangeData.tokenAddress,\n    tradeVolume: currentData.tradeVolume,\n    tradeVolumeUSD: currentData.tradeVolumeUSD,\n    oneDayTxs: currentData.oneDayTxs,\n    ethLiquidity: currentData.ethLiquidity,\n    price: currentData.price,\n    invPrice: currentData.invPrice,\n    priceUSD: currentData.priceUSD,\n    pricePercentChange: currentData.pricePercentChange,\n    pricePercentChangeETH: currentData.pricePercentChangeETH,\n    volumePercentChange: currentData.volumePercentChange,\n    volumePercentChangeUSD: currentData.volumePercentChangeUSD,\n    liquidityPercentChange: currentData.liquidityPercentChange,\n    liquidityPercentChangeUSD: currentData.liquidityPercentChangeUSD,\n    txsPercentChange: currentData.txsPercentChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }) : React.createElement(LocalLoader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/workspace/uniswap-info/src/pages/ExchangeWrapper.js"],"names":["React","useEffect","useState","ExchangePage","LocalLoader","useExchangeSpecificData","useChart","setThemeColor","isAddress","darken","Vibrant","hex","ExchangeWrapper","address","exchanges","currencyUnit","historyDaysToQuery","setHistoryDaysToQuery","exchangeData","chartData","tokenName","setTokenName","tokenSymbol","setTokenSymbol","logo","setLogo","currentData","setCurrentData","updateData","price","invPrice","priceUSD","tokenAddress","tokenAddres","pricePercentChange","pricePercentChangeETH","volumePercentChange","volumePercentChangeETH","volumePercentChangeUSD","liquidityPercentChange","liquidityPercentChangeETH","liquidityPercentChangeUSD","txsPercentChange","ethLiquidity","tradeVolume","tradeVolumeUSD","oneDayTxs","hasOwnProperty","path","from","getPalette","err","palette","detectedHex","AAscore","logoStyled"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { ExchangePage } from '../components/ExchangePage'\nimport LocalLoader from '../components/LocalLoader'\nimport { useExchangeSpecificData } from '../Data/ExchangeSpecificData'\nimport { useChart } from '../Data/ChartData'\nimport { setThemeColor, isAddress } from '../helpers'\nimport { darken } from 'polished'\nimport Vibrant from 'node-vibrant'\nimport { hex } from 'wcag-contrast'\n\nexport const ExchangeWrapper = function({\n  address,\n  exchanges,\n  currencyUnit,\n  historyDaysToQuery,\n  setHistoryDaysToQuery\n}) {\n  const exchangeData = useExchangeSpecificData(address)\n\n  const chartData = useChart(address, historyDaysToQuery)\n\n  const [tokenName, setTokenName] = useState('')\n\n  const [tokenSymbol, setTokenSymbol] = useState('')\n\n  const [logo, setLogo] = useState('')\n\n  const [currentData, setCurrentData] = useState({})\n\n  useEffect(() => {\n    let updateData = {}\n    updateData.price = exchangeData.price\n    updateData.invPrice = exchangeData.invPrice\n    updateData.priceUSD = exchangeData.priceUSD\n    updateData.tokenAddress = exchangeData.tokenAddres\n    updateData.pricePercentChange = exchangeData.pricePercentChange\n    updateData.pricePercentChangeETH = exchangeData.pricePercentChangeETH\n    updateData.volumePercentChange = exchangeData.volumePercentChangeETH\n    updateData.volumePercentChangeUSD = exchangeData.volumePercentChangeUSD\n    updateData.liquidityPercentChange = exchangeData.liquidityPercentChangeETH\n    updateData.liquidityPercentChangeUSD = exchangeData.liquidityPercentChangeUSD\n    updateData.txsPercentChange = exchangeData.txsPercentChange\n    updateData.ethLiquidity = exchangeData.ethLiquidity\n    updateData.tradeVolume = exchangeData.tradeVolume\n    updateData.tradeVolumeUSD = exchangeData.tradeVolumeUSD\n    updateData.oneDayTxs = exchangeData.oneDayTxs\n    setCurrentData(updateData)\n  }, [exchangeData])\n\n  useEffect(() => {\n    setCurrentData({}) // reset data for UI\n    if (exchanges.hasOwnProperty(address)) {\n      let tokenAddress = exchanges[address].tokenAddress\n      const path = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${isAddress(\n        tokenAddress\n      )}/logo.png`\n      Vibrant.from(path).getPalette((err, palette) => {\n        if (palette && palette.Vibrant) {\n          let detectedHex = palette.Vibrant.hex\n          let AAscore = hex(detectedHex, '#FFF')\n          while (AAscore < 3) {\n            detectedHex = darken(0.01, detectedHex)\n            AAscore = hex(detectedHex, '#FFF')\n          }\n          setThemeColor(detectedHex)\n        }\n      })\n    } else {\n      setThemeColor('#333333')\n    }\n  }, [address, exchanges])\n\n  useEffect(() => {\n    if (exchanges.hasOwnProperty(address)) {\n      setTokenName(exchanges[address].tokenName)\n      setTokenSymbol(exchanges[address].tokenSymbol)\n      setLogo(exchanges[address].logoStyled)\n    }\n  }, [exchanges, address])\n\n  return exchangeData ? (\n    <ExchangePage\n      currencyUnit={currencyUnit}\n      exchangeAddress={address}\n      chartData={chartData}\n      logo={logo}\n      historyDaysToQuery={historyDaysToQuery}\n      setHistoryDaysToQuery={setHistoryDaysToQuery}\n      tokenName={tokenName}\n      symbol={tokenSymbol}\n      tokenAddress={exchangeData.tokenAddress}\n      tradeVolume={currentData.tradeVolume}\n      tradeVolumeUSD={currentData.tradeVolumeUSD}\n      oneDayTxs={currentData.oneDayTxs}\n      ethLiquidity={currentData.ethLiquidity}\n      price={currentData.price}\n      invPrice={currentData.invPrice}\n      priceUSD={currentData.priceUSD}\n      pricePercentChange={currentData.pricePercentChange}\n      pricePercentChangeETH={currentData.pricePercentChangeETH}\n      volumePercentChange={currentData.volumePercentChange}\n      volumePercentChangeUSD={currentData.volumePercentChangeUSD}\n      liquidityPercentChange={currentData.liquidityPercentChange}\n      liquidityPercentChangeUSD={currentData.liquidityPercentChangeUSD}\n      txsPercentChange={currentData.txsPercentChange}\n    />\n  ) : (\n    <LocalLoader />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}