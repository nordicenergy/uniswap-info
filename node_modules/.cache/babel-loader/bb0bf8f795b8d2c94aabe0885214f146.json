{"ast":null,"code":"import _slicedToArray from \"/workspace/uniswap-info/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { client } from '../apollo/client';\nimport { TICKER_QUERY, TICKER_24HOUR_QUERY } from '../apollo/queries';\nimport { get2DayPercentFormatted, getPercentFormatted } from '../helpers';\nexport function useExchangeSpecificData(exchangeAddress) {\n  dayjs.extend(utc);\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        exchangeData = _useState2[0],\n        setExchangeData = _useState2[1];\n\n  useEffect(() => {\n    const fetchExchangeData = async function (address) {\n      const utcCurrentTime = dayjs();\n      let data24HoursAgo = {};\n      let data48HoursAgo = {};\n      let data = {};\n      let newExchangeData = {}; // get the current state of the exchange\n\n      const result = await client.query({\n        query: TICKER_QUERY,\n        variables: {\n          id: address\n        },\n        fetchPolicy: 'network-only'\n      });\n\n      if (result) {\n        data = result.data.exchange;\n      }\n\n      let _data = data,\n          tokenName = _data.tokenName,\n          tokenSymbol = _data.tokenSymbol,\n          tokenAddress = _data.tokenAddress,\n          price = _data.price,\n          ethBalance = _data.ethBalance,\n          tradeVolumeEth = _data.tradeVolumeEth,\n          tradeVolumeUSD = _data.tradeVolumeUSD,\n          priceUSD = _data.priceUSD,\n          totalTxsCount = _data.totalTxsCount; // get data from 24 hours ago\n\n      try {\n        const utcOneDayBack = utcCurrentTime.subtract(1, 'day');\n        const result24HoursAgo = await client.query({\n          query: TICKER_24HOUR_QUERY,\n          variables: {\n            exchangeAddr: address,\n            timestamp: utcOneDayBack.unix()\n          },\n          fetchPolicy: 'network-only'\n        });\n\n        if (result24HoursAgo) {\n          data24HoursAgo = result24HoursAgo.data.exchangeHistoricalDatas[0] ? result24HoursAgo.data.exchangeHistoricalDatas[0] : data24HoursAgo;\n        }\n      } catch (err) {\n        console.log('error: ', err);\n      } // get data from 48 hours ago\n\n\n      try {\n        const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day');\n        const result48HoursAgo = await client.query({\n          query: TICKER_24HOUR_QUERY,\n          variables: {\n            exchangeAddr: address,\n            timestamp: utcTwoDaysBack.unix()\n          },\n          fetchPolicy: 'network-only'\n        });\n\n        if (result48HoursAgo) {\n          data48HoursAgo = result48HoursAgo.data.exchangeHistoricalDatas[0] ? result48HoursAgo.data.exchangeHistoricalDatas[0] : data48HoursAgo;\n        }\n      } catch (err) {\n        console.log('error: ', err);\n      } // set default values to 0 (for exchanges that are brand new and dont have 24 hour data yet)\n\n\n      const invPrice = 1 / price;\n      let pricePercentChangeUSD = 0;\n      let pricePercentChangeETH = 0;\n      let volumePercentChangeETH = 0;\n      let volumePercentChangeUSD = 0;\n      let liquidityPercentChangeETH = 0;\n      let liquidityPercentChangeUSD = 0;\n      let txsPercentChange = 0;\n      let oneDayTxs = 0;\n      let oneDayVolume = 0;\n      let oneDayVolumeUSD = 0;\n\n      if (data) {\n        // volume in ETH\n        ;\n\n        var _get2DayPercentFormat = get2DayPercentFormatted(tradeVolumeEth, data24HoursAgo.tradeVolumeEth ? data24HoursAgo.tradeVolumeEth : 0, data48HoursAgo.tradeVolumeEth ? data48HoursAgo.tradeVolumeEth : 0);\n\n        var _get2DayPercentFormat2 = _slicedToArray(_get2DayPercentFormat, 2);\n\n        oneDayVolume = _get2DayPercentFormat2[0];\n        volumePercentChangeETH = _get2DayPercentFormat2[1]; // until updated graph with correct USD accumulation\n\n        var _get2DayPercentFormat3 = get2DayPercentFormatted(tradeVolumeUSD, data24HoursAgo.tradeVolumeUSD ? data24HoursAgo.tradeVolumeUSD : 0, data48HoursAgo.tradeVolumeUSD ? data48HoursAgo.tradeVolumeUSD : 0);\n\n        var _get2DayPercentFormat4 = _slicedToArray(_get2DayPercentFormat3, 2);\n\n        oneDayVolumeUSD = _get2DayPercentFormat4[0];\n        volumePercentChangeUSD = _get2DayPercentFormat4[1]; // get tx values\n\n        var _get2DayPercentFormat5 = get2DayPercentFormatted(totalTxsCount, data24HoursAgo.totalTxsCount ? data24HoursAgo.totalTxsCount : 1, //account for initial add tx\n        data48HoursAgo.totalTxsCount ? data48HoursAgo.totalTxsCount : 1);\n\n        var _get2DayPercentFormat6 = _slicedToArray(_get2DayPercentFormat5, 2);\n\n        oneDayTxs = _get2DayPercentFormat6[0];\n        txsPercentChange = _get2DayPercentFormat6[1];\n        // regular percentage changes\n        pricePercentChangeUSD = getPercentFormatted(priceUSD, data24HoursAgo.tokenPriceUSD);\n        pricePercentChangeETH = getPercentFormatted(1 / price, 1 / data24HoursAgo.price);\n        liquidityPercentChangeETH = getPercentFormatted(ethBalance, data24HoursAgo.ethBalance);\n        liquidityPercentChangeUSD = getPercentFormatted(ethBalance * price * priceUSD, data24HoursAgo.ethBalance * data24HoursAgo.price * data24HoursAgo.tokenPriceUSD);\n      } // manual overrides\n\n\n      if (tokenAddress === '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359') {\n        tokenSymbol = 'SAI';\n      }\n\n      if (tokenAddress === '0xf5dce57282a584d2746faf1593d3121fcac444dc') {\n        tokenSymbol = 'cSAI';\n        tokenName = 'Compound Sai';\n      } // update \"exchanges\" with new information\n\n\n      newExchangeData.tokenName = tokenName;\n      newExchangeData.tokenSymbol = tokenSymbol;\n      newExchangeData.tokenAddress = tokenAddress;\n      newExchangeData.price = price;\n      newExchangeData.invPrice = invPrice;\n      newExchangeData.priceUSD = priceUSD;\n      newExchangeData.pricePercentChange = pricePercentChangeUSD;\n      newExchangeData.pricePercentChangeETH = pricePercentChangeETH;\n      newExchangeData.volumePercentChangeETH = volumePercentChangeETH;\n      newExchangeData.volumePercentChangeUSD = volumePercentChangeUSD;\n      newExchangeData.liquidityPercentChangeETH = liquidityPercentChangeETH;\n      newExchangeData.liquidityPercentChangeUSD = liquidityPercentChangeUSD;\n      newExchangeData.tradeVolume = oneDayVolume;\n      newExchangeData.tradeVolumeUSD = oneDayVolumeUSD;\n      newExchangeData.oneDayTxs = oneDayTxs;\n      newExchangeData.ethLiquidity = ethBalance;\n      newExchangeData.txsPercentChange = txsPercentChange;\n      setExchangeData(newExchangeData);\n    };\n\n    fetchExchangeData(exchangeAddress);\n  }, [exchangeAddress]);\n  return exchangeData;\n}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/ExchangeSpecificData.js"],"names":["useEffect","useState","dayjs","utc","client","TICKER_QUERY","TICKER_24HOUR_QUERY","get2DayPercentFormatted","getPercentFormatted","useExchangeSpecificData","exchangeAddress","extend","exchangeData","setExchangeData","fetchExchangeData","address","utcCurrentTime","data24HoursAgo","data48HoursAgo","data","newExchangeData","result","query","variables","id","fetchPolicy","exchange","tokenName","tokenSymbol","tokenAddress","price","ethBalance","tradeVolumeEth","tradeVolumeUSD","priceUSD","totalTxsCount","utcOneDayBack","subtract","result24HoursAgo","exchangeAddr","timestamp","unix","exchangeHistoricalDatas","err","console","log","utcTwoDaysBack","result48HoursAgo","invPrice","pricePercentChangeUSD","pricePercentChangeETH","volumePercentChangeETH","volumePercentChangeUSD","liquidityPercentChangeETH","liquidityPercentChangeUSD","txsPercentChange","oneDayTxs","oneDayVolume","oneDayVolumeUSD","tokenPriceUSD","pricePercentChange","tradeVolume","ethLiquidity"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport { client } from '../apollo/client'\nimport { TICKER_QUERY, TICKER_24HOUR_QUERY } from '../apollo/queries'\nimport { get2DayPercentFormatted, getPercentFormatted } from '../helpers'\n\nexport function useExchangeSpecificData(exchangeAddress) {\n  dayjs.extend(utc)\n\n  const [exchangeData, setExchangeData] = useState({})\n\n  useEffect(() => {\n    const fetchExchangeData = async function(address) {\n      const utcCurrentTime = dayjs()\n      let data24HoursAgo = {}\n      let data48HoursAgo = {}\n      let data = {}\n      let newExchangeData = {}\n      // get the current state of the exchange\n      const result = await client.query({\n        query: TICKER_QUERY,\n        variables: {\n          id: address\n        },\n        fetchPolicy: 'network-only'\n      })\n\n      if (result) {\n        data = result.data.exchange\n      }\n\n      let {\n        tokenName,\n        tokenSymbol,\n        tokenAddress,\n        price,\n        ethBalance,\n        tradeVolumeEth,\n        tradeVolumeUSD,\n        priceUSD,\n        totalTxsCount\n      } = data\n\n      // get data from 24 hours ago\n      try {\n        const utcOneDayBack = utcCurrentTime.subtract(1, 'day')\n        const result24HoursAgo = await client.query({\n          query: TICKER_24HOUR_QUERY,\n          variables: {\n            exchangeAddr: address,\n            timestamp: utcOneDayBack.unix()\n          },\n          fetchPolicy: 'network-only'\n        })\n        if (result24HoursAgo) {\n          data24HoursAgo = result24HoursAgo.data.exchangeHistoricalDatas[0]\n            ? result24HoursAgo.data.exchangeHistoricalDatas[0]\n            : data24HoursAgo\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      // get data from 48 hours ago\n      try {\n        const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day')\n        const result48HoursAgo = await client.query({\n          query: TICKER_24HOUR_QUERY,\n          variables: {\n            exchangeAddr: address,\n            timestamp: utcTwoDaysBack.unix()\n          },\n          fetchPolicy: 'network-only'\n        })\n        if (result48HoursAgo) {\n          data48HoursAgo = result48HoursAgo.data.exchangeHistoricalDatas[0]\n            ? result48HoursAgo.data.exchangeHistoricalDatas[0]\n            : data48HoursAgo\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      // set default values to 0 (for exchanges that are brand new and dont have 24 hour data yet)\n      const invPrice = 1 / price\n      let pricePercentChangeUSD = 0\n      let pricePercentChangeETH = 0\n      let volumePercentChangeETH = 0\n      let volumePercentChangeUSD = 0\n      let liquidityPercentChangeETH = 0\n      let liquidityPercentChangeUSD = 0\n      let txsPercentChange = 0\n      let oneDayTxs = 0\n      let oneDayVolume = 0\n      let oneDayVolumeUSD = 0\n\n      if (data) {\n        // volume in ETH\n        ;[oneDayVolume, volumePercentChangeETH] = get2DayPercentFormatted(\n          tradeVolumeEth,\n          data24HoursAgo.tradeVolumeEth ? data24HoursAgo.tradeVolumeEth : 0,\n          data48HoursAgo.tradeVolumeEth ? data48HoursAgo.tradeVolumeEth : 0\n        )\n\n        // until updated graph with correct USD accumulation\n        ;[oneDayVolumeUSD, volumePercentChangeUSD] = get2DayPercentFormatted(\n          tradeVolumeUSD,\n          data24HoursAgo.tradeVolumeUSD ? data24HoursAgo.tradeVolumeUSD : 0,\n          data48HoursAgo.tradeVolumeUSD ? data48HoursAgo.tradeVolumeUSD : 0\n        )\n\n        // get tx values\n        ;[oneDayTxs, txsPercentChange] = get2DayPercentFormatted(\n          totalTxsCount,\n          data24HoursAgo.totalTxsCount ? data24HoursAgo.totalTxsCount : 1, //account for initial add tx\n          data48HoursAgo.totalTxsCount ? data48HoursAgo.totalTxsCount : 1\n        )\n\n        // regular percentage changes\n        pricePercentChangeUSD = getPercentFormatted(priceUSD, data24HoursAgo.tokenPriceUSD)\n        pricePercentChangeETH = getPercentFormatted(1 / price, 1 / data24HoursAgo.price)\n        liquidityPercentChangeETH = getPercentFormatted(ethBalance, data24HoursAgo.ethBalance)\n        liquidityPercentChangeUSD = getPercentFormatted(\n          ethBalance * price * priceUSD,\n          data24HoursAgo.ethBalance * data24HoursAgo.price * data24HoursAgo.tokenPriceUSD\n        )\n      }\n\n      // manual overrides\n      if (tokenAddress === '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359') {\n        tokenSymbol = 'SAI'\n      }\n\n      if (tokenAddress === '0xf5dce57282a584d2746faf1593d3121fcac444dc') {\n        tokenSymbol = 'cSAI'\n        tokenName = 'Compound Sai'\n      }\n\n      // update \"exchanges\" with new information\n      newExchangeData.tokenName = tokenName\n      newExchangeData.tokenSymbol = tokenSymbol\n      newExchangeData.tokenAddress = tokenAddress\n      newExchangeData.price = price\n      newExchangeData.invPrice = invPrice\n      newExchangeData.priceUSD = priceUSD\n      newExchangeData.pricePercentChange = pricePercentChangeUSD\n      newExchangeData.pricePercentChangeETH = pricePercentChangeETH\n      newExchangeData.volumePercentChangeETH = volumePercentChangeETH\n      newExchangeData.volumePercentChangeUSD = volumePercentChangeUSD\n      newExchangeData.liquidityPercentChangeETH = liquidityPercentChangeETH\n      newExchangeData.liquidityPercentChangeUSD = liquidityPercentChangeUSD\n      newExchangeData.tradeVolume = oneDayVolume\n      newExchangeData.tradeVolumeUSD = oneDayVolumeUSD\n      newExchangeData.oneDayTxs = oneDayTxs\n      newExchangeData.ethLiquidity = ethBalance\n      newExchangeData.txsPercentChange = txsPercentChange\n\n      setExchangeData(newExchangeData)\n    }\n    fetchExchangeData(exchangeAddress)\n  }, [exchangeAddress])\n\n  return exchangeData\n}\n"]},"metadata":{},"sourceType":"module"}