{"ast":null,"code":"import _slicedToArray from\"/workspace/uniswap-info/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{ApolloProvider}from'react-apollo';import{client}from'./apollo/client';import{Route,Switch,BrowserRouter,withRouter,Redirect}from'react-router-dom';import Wrapper from'./components/Theme';import NavHeader from'./components/NavHeader';import{ExchangeWrapper}from'./pages/ExchangeWrapper';import{OverviewPage}from'./pages/OverviewPage';import{useGlobalData}from'./Data/GlobalData';import{useUniswapHistory}from'./Data/UniswapHistory';import{timeframeOptions}from'./constants';import{useAllExchanges}from'./Data/GetAllExchanges';import LocalLoader from'./components/LocalLoader';function App(props){// set default time box to all time\nvar _useState=useState(timeframeOptions[3].value),_useState2=_slicedToArray(_useState,2),historyDaysToQuery=_useState2[0],setHistoryDaysToQuery=_useState2[1];// currency across site can be USD or ETH\nvar _useState3=useState('USD'),_useState4=_slicedToArray(_useState3,2),currencyUnit=_useState4[0],setCurrencyUnit=_useState4[1];// historical data for chart on overview page\nvar uniswapHistory=useUniswapHistory(historyDaysToQuery);// data for Uniswap totals on overview page, may be dependent on values in the future\nvar globalData=useGlobalData();// essential data for each exchange above liqudiity threshold\nvar exchanges=useAllExchanges();//used for route loading\nvar _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),length=_useState6[0],setLength=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),tokenToExchangeMap=_useState8[0],setTokenToExchangeMap=_useState8[1];useEffect(function(){if(exchanges){setLength(Object.keys(exchanges).length);}var newSet={};Object.keys(exchanges).map(function(key){newSet[exchanges[key].tokenAddress.toLowerCase()]=key;return true;});setTokenToExchangeMap(newSet);},[exchanges]);var NavHeaderUpdated=withRouter(function(props){return React.createElement(NavHeader,Object.assign({default:true},props,{exchanges:exchanges,currencyUnit:currencyUnit,setCurrencyUnit:setCurrencyUnit,setHistoryDaysToQuery:setHistoryDaysToQuery}));});return React.createElement(ApolloProvider,{client:client},React.createElement(Wrapper,null,React.createElement(\"div\",{style:{position:'relative'}},globalData&&uniswapHistory&&length>0?React.createElement(BrowserRouter,null,React.createElement(NavHeaderUpdated,null),React.createElement(Switch,null,React.createElement(Route,{exact:true,strict:true,path:\"/token/:tokenAddressURL?\",render:function render(_ref){var match=_ref.match;if(exchanges&&tokenToExchangeMap.hasOwnProperty(match.params.tokenAddressURL.toLowerCase())){return React.createElement(ExchangeWrapper,{currencyUnit:currencyUnit,address:tokenToExchangeMap[match.params.tokenAddressURL.toLowerCase()],exchanges:exchanges,historyDaysToQuery:historyDaysToQuery,setHistoryDaysToQuery:setHistoryDaysToQuery});}else{return React.createElement(Redirect,{to:\"/home\"});}}}),React.createElement(Route,{path:\"/home\"},React.createElement(OverviewPage,{currencyUnit:currencyUnit,globalData:globalData,uniswapHistory:uniswapHistory,historyDaysToQuery:historyDaysToQuery,updateTimeframe:setHistoryDaysToQuery})),React.createElement(Redirect,{to:\"/home\"}))):React.createElement(LocalLoader,{fill:\"true\"}))));}export default App;","map":{"version":3,"sources":["/workspace/uniswap-info/src/App.js"],"names":["React","useState","useEffect","ApolloProvider","client","Route","Switch","BrowserRouter","withRouter","Redirect","Wrapper","NavHeader","ExchangeWrapper","OverviewPage","useGlobalData","useUniswapHistory","timeframeOptions","useAllExchanges","LocalLoader","App","props","value","historyDaysToQuery","setHistoryDaysToQuery","currencyUnit","setCurrencyUnit","uniswapHistory","globalData","exchanges","length","setLength","tokenToExchangeMap","setTokenToExchangeMap","Object","keys","newSet","map","key","tokenAddress","toLowerCase","NavHeaderUpdated","position","match","hasOwnProperty","params","tokenAddressURL"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { client } from './apollo/client'\nimport { Route, Switch, BrowserRouter, withRouter, Redirect } from 'react-router-dom'\nimport Wrapper from './components/Theme'\nimport NavHeader from './components/NavHeader'\nimport { ExchangeWrapper } from './pages/ExchangeWrapper'\nimport { OverviewPage } from './pages/OverviewPage'\nimport { useGlobalData } from './Data/GlobalData'\nimport { useUniswapHistory } from './Data/UniswapHistory'\nimport { timeframeOptions } from './constants'\nimport { useAllExchanges } from './Data/GetAllExchanges'\nimport LocalLoader from './components/LocalLoader'\n\nfunction App(props) {\n  // set default time box to all time\n  const [historyDaysToQuery, setHistoryDaysToQuery] = useState(timeframeOptions[3].value)\n\n  // currency across site can be USD or ETH\n  const [currencyUnit, setCurrencyUnit] = useState('USD')\n\n  // historical data for chart on overview page\n  const uniswapHistory = useUniswapHistory(historyDaysToQuery)\n\n  // data for Uniswap totals on overview page, may be dependent on values in the future\n  const globalData = useGlobalData()\n\n  // essential data for each exchange above liqudiity threshold\n  const exchanges = useAllExchanges()\n\n  //used for route loading\n  const [length, setLength] = useState(0)\n\n  const [tokenToExchangeMap, setTokenToExchangeMap] = useState()\n\n  useEffect(() => {\n    if (exchanges) {\n      setLength(Object.keys(exchanges).length)\n    }\n    let newSet = {}\n    Object.keys(exchanges).map(key => {\n      newSet[exchanges[key].tokenAddress.toLowerCase()] = key\n      return true\n    })\n    setTokenToExchangeMap(newSet)\n  }, [exchanges])\n\n  const NavHeaderUpdated = withRouter(props => (\n    <NavHeader\n      default\n      {...props}\n      exchanges={exchanges}\n      currencyUnit={currencyUnit}\n      setCurrencyUnit={setCurrencyUnit}\n      setHistoryDaysToQuery={setHistoryDaysToQuery}\n    />\n  ))\n\n  return (\n    <ApolloProvider client={client}>\n      <Wrapper>\n        <div style={{ position: 'relative' }}>\n          {globalData && uniswapHistory && length > 0 ? (\n            <BrowserRouter>\n              <NavHeaderUpdated />\n              <Switch>\n                <Route\n                  exact\n                  strict\n                  path=\"/token/:tokenAddressURL?\"\n                  render={({ match }) => {\n                    if (exchanges && tokenToExchangeMap.hasOwnProperty(match.params.tokenAddressURL.toLowerCase())) {\n                      return (\n                        <ExchangeWrapper\n                          currencyUnit={currencyUnit}\n                          address={tokenToExchangeMap[match.params.tokenAddressURL.toLowerCase()]}\n                          exchanges={exchanges}\n                          historyDaysToQuery={historyDaysToQuery}\n                          setHistoryDaysToQuery={setHistoryDaysToQuery}\n                        />\n                      )\n                    } else {\n                      return <Redirect to=\"/home\" />\n                    }\n                  }}\n                />\n                <Route path=\"/home\">\n                  <OverviewPage\n                    currencyUnit={currencyUnit}\n                    globalData={globalData}\n                    uniswapHistory={uniswapHistory}\n                    historyDaysToQuery={historyDaysToQuery}\n                    updateTimeframe={setHistoryDaysToQuery}\n                  />\n                </Route>\n                <Redirect to=\"/home\" />\n              </Switch>\n            </BrowserRouter>\n          ) : (\n            <LocalLoader fill=\"true\" />\n          )}\n        </div>\n      </Wrapper>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}