{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/uniswap-info/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/uniswap-info/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/workspace/uniswap-info/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import dayjs from'dayjs';import utc from'dayjs/plugin/utc';import{get2DayPercentFormatted,getPercentFormatted}from'../helpers';import{client}from'../apollo/client';import{UNISWAP_GLOBALS_QUERY,UNISWAP_GLOBALS_24HOURS_AGO_QUERY}from'../apollo/queries';export function useGlobalData(){dayjs.extend(utc);var _useState=useState(),_useState2=_slicedToArray(_useState,2),globalData=_useState2[0],setGlobalData=_useState2[1];useEffect(function(){var fetchGlobalData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data,data24HoursAgo,data48HoursAgo,utcCurrentTime,result,utcOneDayBack,_result,utcTwoDaysBack,resultTwoDays,_get2DayPercentFormat,_get2DayPercentFormat2,volumeChangeUSD,volumePercentChangeUSD,_get2DayPercentFormat3,_get2DayPercentFormat4,volumeChangeETH,volumePercentChangeETH,_get2DayPercentFormat5,_get2DayPercentFormat6,txCountChange,txCountPercentChange,liquidityPercentChangeETH,liquidityPercentChangeUSD;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:data={};data24HoursAgo={};data48HoursAgo={};utcCurrentTime=dayjs();_context.prev=4;_context.next=7;return client.query({query:UNISWAP_GLOBALS_QUERY,fetchPolicy:'cache-first'});case 7:result=_context.sent;if(result){data.totalVolumeInEth=result.data.uniswap.totalVolumeInEth;data.totalVolumeUSD=result.data.uniswap.totalVolumeUSD;data.liquidityEth=result.data.uniswap.totalLiquidityInEth;data.liquidityUsd=result.data.uniswap.totalLiquidityUSD;data.txCount=result.data.uniswap.txCount;}_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](4);console.log('error: ',_context.t0);case 14:_context.prev=14;utcOneDayBack=utcCurrentTime.subtract(1,'day');// get data one day ago\n_context.next=18;return client.query({query:UNISWAP_GLOBALS_24HOURS_AGO_QUERY,variables:{date:utcOneDayBack.unix()},fetchPolicy:'cache-first'});case 18:_result=_context.sent;if(_result){data24HoursAgo.totalVolumeInEth=_result.data.uniswapHistoricalDatas[0].totalVolumeInEth;data24HoursAgo.totalVolumeUSD=_result.data.uniswapHistoricalDatas[0].totalVolumeUSD;data24HoursAgo.liquidityEth=_result.data.uniswapHistoricalDatas[0].totalLiquidityInEth;data24HoursAgo.liquidityUsd=_result.data.uniswapHistoricalDatas[0].totalLiquidityUSD;data24HoursAgo.txCount=_result.data.uniswapHistoricalDatas[0].txCount;}_context.next=25;break;case 22:_context.prev=22;_context.t1=_context[\"catch\"](14);console.log('error: ',_context.t1);case 25:// get two day stats\nutcTwoDaysBack=utcCurrentTime.subtract(2,'day');_context.prev=26;_context.next=29;return client.query({query:UNISWAP_GLOBALS_24HOURS_AGO_QUERY,variables:{date:utcTwoDaysBack.unix()},fetchPolicy:'cache-first'});case 29:resultTwoDays=_context.sent;if(resultTwoDays){// set two day data\ndata48HoursAgo.totalVolumeInEth=resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeInEth;data48HoursAgo.totalVolumeUSD=resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeUSD;data48HoursAgo.liquidityEth=resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityInEth;data48HoursAgo.liquidityUsd=resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityUSD;data48HoursAgo.txCount=resultTwoDays.data.uniswapHistoricalDatas[0].txCount;}_context.next=36;break;case 33:_context.prev=33;_context.t2=_context[\"catch\"](26);console.log('error: ',_context.t2);case 36:// 48 hour windows\n_get2DayPercentFormat=get2DayPercentFormatted(data.totalVolumeUSD,data24HoursAgo.totalVolumeUSD,data48HoursAgo.totalVolumeUSD),_get2DayPercentFormat2=_slicedToArray(_get2DayPercentFormat,2),volumeChangeUSD=_get2DayPercentFormat2[0],volumePercentChangeUSD=_get2DayPercentFormat2[1];_get2DayPercentFormat3=get2DayPercentFormatted(data.totalVolumeInEth,data24HoursAgo.totalVolumeInEth,data48HoursAgo.totalVolumeInEth),_get2DayPercentFormat4=_slicedToArray(_get2DayPercentFormat3,2),volumeChangeETH=_get2DayPercentFormat4[0],volumePercentChangeETH=_get2DayPercentFormat4[1];_get2DayPercentFormat5=get2DayPercentFormatted(data.txCount,data24HoursAgo.txCount,data48HoursAgo.txCount),_get2DayPercentFormat6=_slicedToArray(_get2DayPercentFormat5,2),txCountChange=_get2DayPercentFormat6[0],txCountPercentChange=_get2DayPercentFormat6[1];// regular percent changes\nliquidityPercentChangeETH=getPercentFormatted(data.liquidityEth,data24HoursAgo.liquidityEth);liquidityPercentChangeUSD=getPercentFormatted(data.liquidityUsd,data24HoursAgo.liquidityUsd);data.liquidityPercentChange=liquidityPercentChangeETH;data.liquidityPercentChangeUSD=liquidityPercentChangeUSD;data.volumePercentChange=volumePercentChangeETH;data.volumePercentChangeUSD=volumePercentChangeUSD;data.txCount=txCountChange;data.txCountPercentChange=txCountPercentChange;data.dailyVolumeETH=volumeChangeETH;data.dailyVolumeUSD=volumeChangeUSD;setGlobalData(data);case 50:case\"end\":return _context.stop();}}},_callee,null,[[4,11],[14,22],[26,33]]);}));return function fetchGlobalData(){return _ref.apply(this,arguments);};}();fetchGlobalData();},[]);return globalData;}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/GlobalData.js"],"names":["useEffect","useState","dayjs","utc","get2DayPercentFormatted","getPercentFormatted","client","UNISWAP_GLOBALS_QUERY","UNISWAP_GLOBALS_24HOURS_AGO_QUERY","useGlobalData","extend","globalData","setGlobalData","fetchGlobalData","data","data24HoursAgo","data48HoursAgo","utcCurrentTime","query","fetchPolicy","result","totalVolumeInEth","uniswap","totalVolumeUSD","liquidityEth","totalLiquidityInEth","liquidityUsd","totalLiquidityUSD","txCount","console","log","utcOneDayBack","subtract","variables","date","unix","uniswapHistoricalDatas","utcTwoDaysBack","resultTwoDays","volumeChangeUSD","volumePercentChangeUSD","volumeChangeETH","volumePercentChangeETH","txCountChange","txCountPercentChange","liquidityPercentChangeETH","liquidityPercentChangeUSD","liquidityPercentChange","volumePercentChange","dailyVolumeETH","dailyVolumeUSD"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport { get2DayPercentFormatted, getPercentFormatted } from '../helpers'\nimport { client } from '../apollo/client'\nimport { UNISWAP_GLOBALS_QUERY, UNISWAP_GLOBALS_24HOURS_AGO_QUERY } from '../apollo/queries'\n\nexport function useGlobalData() {\n  dayjs.extend(utc)\n  const [globalData, setGlobalData] = useState()\n\n  useEffect(() => {\n    const fetchGlobalData = async function() {\n      let data = {}\n      let data24HoursAgo = {}\n      let data48HoursAgo = {}\n      const utcCurrentTime = dayjs()\n      try {\n        // get the current data\n        let result = await client.query({\n          query: UNISWAP_GLOBALS_QUERY,\n          fetchPolicy: 'cache-first'\n        })\n        if (result) {\n          data.totalVolumeInEth = result.data.uniswap.totalVolumeInEth\n          data.totalVolumeUSD = result.data.uniswap.totalVolumeUSD\n          data.liquidityEth = result.data.uniswap.totalLiquidityInEth\n          data.liquidityUsd = result.data.uniswap.totalLiquidityUSD\n          data.txCount = result.data.uniswap.txCount\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      try {\n        const utcOneDayBack = utcCurrentTime.subtract(1, 'day')\n        // get data one day ago\n        let result = await client.query({\n          query: UNISWAP_GLOBALS_24HOURS_AGO_QUERY,\n          variables: {\n            date: utcOneDayBack.unix()\n          },\n          fetchPolicy: 'cache-first'\n        })\n        if (result) {\n          data24HoursAgo.totalVolumeInEth = result.data.uniswapHistoricalDatas[0].totalVolumeInEth\n          data24HoursAgo.totalVolumeUSD = result.data.uniswapHistoricalDatas[0].totalVolumeUSD\n          data24HoursAgo.liquidityEth = result.data.uniswapHistoricalDatas[0].totalLiquidityInEth\n          data24HoursAgo.liquidityUsd = result.data.uniswapHistoricalDatas[0].totalLiquidityUSD\n          data24HoursAgo.txCount = result.data.uniswapHistoricalDatas[0].txCount\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n      // get two day stats\n      const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day')\n      try {\n        let resultTwoDays = await client.query({\n          query: UNISWAP_GLOBALS_24HOURS_AGO_QUERY,\n          variables: {\n            date: utcTwoDaysBack.unix()\n          },\n          fetchPolicy: 'cache-first'\n        })\n        if (resultTwoDays) {\n          // set two day data\n          data48HoursAgo.totalVolumeInEth = resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeInEth\n          data48HoursAgo.totalVolumeUSD = resultTwoDays.data.uniswapHistoricalDatas[0].totalVolumeUSD\n          data48HoursAgo.liquidityEth = resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityInEth\n          data48HoursAgo.liquidityUsd = resultTwoDays.data.uniswapHistoricalDatas[0].totalLiquidityUSD\n          data48HoursAgo.txCount = resultTwoDays.data.uniswapHistoricalDatas[0].txCount\n        }\n      } catch (err) {\n        console.log('error: ', err)\n      }\n\n      // 48 hour windows\n      let [volumeChangeUSD, volumePercentChangeUSD] = get2DayPercentFormatted(\n        data.totalVolumeUSD,\n        data24HoursAgo.totalVolumeUSD,\n        data48HoursAgo.totalVolumeUSD\n      )\n\n      let [volumeChangeETH, volumePercentChangeETH] = get2DayPercentFormatted(\n        data.totalVolumeInEth,\n        data24HoursAgo.totalVolumeInEth,\n        data48HoursAgo.totalVolumeInEth\n      )\n\n      let [txCountChange, txCountPercentChange] = get2DayPercentFormatted(\n        data.txCount,\n        data24HoursAgo.txCount,\n        data48HoursAgo.txCount\n      )\n\n      // regular percent changes\n      let liquidityPercentChangeETH = getPercentFormatted(data.liquidityEth, data24HoursAgo.liquidityEth)\n      let liquidityPercentChangeUSD = getPercentFormatted(data.liquidityUsd, data24HoursAgo.liquidityUsd)\n\n      data.liquidityPercentChange = liquidityPercentChangeETH\n      data.liquidityPercentChangeUSD = liquidityPercentChangeUSD\n      data.volumePercentChange = volumePercentChangeETH\n      data.volumePercentChangeUSD = volumePercentChangeUSD\n      data.txCount = txCountChange\n      data.txCountPercentChange = txCountPercentChange\n      data.dailyVolumeETH = volumeChangeETH\n      data.dailyVolumeUSD = volumeChangeUSD\n\n      setGlobalData(data)\n    }\n\n    fetchGlobalData()\n  }, [])\n\n  return globalData\n}\n"]},"metadata":{},"sourceType":"module"}