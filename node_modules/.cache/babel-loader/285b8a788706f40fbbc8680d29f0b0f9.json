{"ast":null,"code":"import _slicedToArray from\"/workspace/uniswap-info/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect,useCallback}from'react';import copy from'copy-to-clipboard';export function useCopyClipboard(){var timeout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:500;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCopied=_useState2[0],setIsCopied=_useState2[1];var staticCopy=useCallback(function(text){var didCopy=copy(text);setIsCopied(didCopy);},[]);useEffect(function(){if(isCopied){var hide=setTimeout(function(){setIsCopied(false);},timeout);return function(){clearTimeout(hide);};}},[isCopied,setIsCopied,timeout]);return[isCopied,staticCopy];}","map":{"version":3,"sources":["/workspace/uniswap-info/src/Data/Copy.js"],"names":["useState","useEffect","useCallback","copy","useCopyClipboard","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","hide","setTimeout","clearTimeout"],"mappings":"0GAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,WAA9B,KAAiD,OAAjD,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CAEA,MAAO,SAASC,CAAAA,gBAAT,EAAyC,IAAfC,CAAAA,OAAe,2DAAL,GAAK,eACdL,QAAQ,CAAC,KAAD,CADM,wCACvCM,QADuC,eAC7BC,WAD6B,eAG9C,GAAMC,CAAAA,UAAU,CAAGN,WAAW,CAAC,SAAAO,IAAI,CAAI,CACrC,GAAMC,CAAAA,OAAO,CAAGP,IAAI,CAACM,IAAD,CAApB,CACAF,WAAW,CAACG,OAAD,CAAX,CACD,CAH6B,CAG3B,EAH2B,CAA9B,CAKAT,SAAS,CAAC,UAAM,CACd,GAAIK,QAAJ,CAAc,CACZ,GAAMK,CAAAA,IAAI,CAAGC,UAAU,CAAC,UAAM,CAC5BL,WAAW,CAAC,KAAD,CAAX,CACD,CAFsB,CAEpBF,OAFoB,CAAvB,CAIA,MAAO,WAAM,CACXQ,YAAY,CAACF,IAAD,CAAZ,CACD,CAFD,CAGD,CACF,CAVQ,CAUN,CAACL,QAAD,CAAWC,WAAX,CAAwBF,OAAxB,CAVM,CAAT,CAYA,MAAO,CAACC,QAAD,CAAWE,UAAX,CAAP,CACD","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\nimport copy from 'copy-to-clipboard'\n\nexport function useCopyClipboard(timeout = 500) {\n  const [isCopied, setIsCopied] = useState(false)\n\n  const staticCopy = useCallback(text => {\n    const didCopy = copy(text)\n    setIsCopied(didCopy)\n  }, [])\n\n  useEffect(() => {\n    if (isCopied) {\n      const hide = setTimeout(() => {\n        setIsCopied(false)\n      }, timeout)\n\n      return () => {\n        clearTimeout(hide)\n      }\n    }\n  }, [isCopied, setIsCopied, timeout])\n\n  return [isCopied, staticCopy]\n}\n"]},"metadata":{},"sourceType":"module"}