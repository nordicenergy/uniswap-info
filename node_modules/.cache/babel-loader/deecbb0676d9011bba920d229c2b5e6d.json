{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport useUpdateEffect from './useUpdateEffect';\nexport default function useStateList(stateSet) {\n  if (stateSet === void 0) {\n    stateSet = [];\n  }\n\n  var _a = useState(0),\n      currentIndex = _a[0],\n      setCurrentIndex = _a[1]; // In case we receive a different state set, check if the current index still exists and\n  // reset it to the last if it don't.\n\n\n  useUpdateEffect(function () {\n    if (!stateSet[currentIndex]) {\n      setCurrentIndex(stateSet.length - 1);\n    }\n  }, [stateSet]);\n  var next = useCallback(function () {\n    var nextStateIndex = stateSet.length === currentIndex + 1 ? 0 : currentIndex + 1;\n    setCurrentIndex(nextStateIndex);\n  }, [stateSet, currentIndex]);\n  var prev = useCallback(function () {\n    var prevStateIndex = currentIndex === 0 ? stateSet.length - 1 : currentIndex - 1;\n    setCurrentIndex(prevStateIndex);\n  }, [stateSet, currentIndex]);\n  return {\n    state: stateSet[currentIndex],\n    next: next,\n    prev: prev\n  };\n}","map":null,"metadata":{},"sourceType":"module"}